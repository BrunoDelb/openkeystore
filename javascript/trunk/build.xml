<project name="WEBPKI.ORG library" default="clean" basedir=".">

  <!-- set global properties for this build -->

  <property name="temp_dir" location=".tmp" />
  <property name="src_dir" value="src/" />
  <property name="runfile" value="${temp_dir}/runthis.js/" />
  

  <target name="help">
    <echo message="Targets: help dist doc testkg2 testsks pkcs12import sks-service."/>
  </target>
    
  <!-- .NET assumes that NAnt is installed, together with Windows SDK 7.1 and .NET 4 -->
  <target name="clean">
    <delete dir="${temp_dir}"/>
  </target>
  
  <target name="add-files">
     <concat destfile="${runfile}" append="true">
        <fileset dir="${src_dir}" includes="${jsfileset}"/>
     </concat>
  </target>

  <target name="test" depends="clean">
    <fixcrlf srcdir="${src_dir}"
       tab="remove"
       tablength="4"
       eol="lf"
       eof="remove"
       includes="**/*.js"/>
    <mkdir dir="${temp_dir}" />
    <copy tofile="${runfile}" file="${src_dir}/antsupport/antsupport.js"/>
    <script language="javascript"> <![CDATA[
        var path = project.getProperty ("files");

        // Build one fileset at a time
        while (path != null) {
            var i = path.indexOf (',');
            var jsfileset = path;
            if (i > 0) {
                jsfileset = path.substring (0, i);
                path = path.substring (i + 1);
            } else {
                path = null;
            }
            var antcall = project.createTask ("antcall");
            antcall.setTarget ("add-files");
            var prop = antcall.createParam ();
            prop.setName ("jsfileset");
            prop.setValue (jsfileset);
            antcall.perform ();
        }
    ]]>
    </script>
    <script language="javascript" src="${runfile}"/>
  </target>

  <!-- HTML Doc task for JCS -->
  <target name="jsonparser">
    <antcall target="test">
       <param name="files" value="jsonparser/*,base64url/*,jsonparser/test/*"/>
    </antcall>
  </target>
  
  <target name="compile">
    <fixcrlf srcdir="${src_dir}"
       tab="remove"
       tablength="4"
       eol="lf"
       eof="remove"
       includes="**/*.java, **/*.xsd"/>
    <mkdir dir="${temp_dir}" />

    <!-- Copy all files except .java and doc-related -->
    <copy todir="${temp_dir}" preservelastmodified="true" includeEmptyDirs="false">
      <fileset dir="${src_dir}">
        <include name="**/*"/>
        <exclude name="**/*.java"/>
        <exclude name="**/package.html"/>
        <exclude name="**/doc-files/*"/>
      </fileset>
    </copy>

    <!-- Compile non-ws java code from ${src_dir} into ${temp_dir} -->
    <javac debug="${debug}"
           srcdir="${src_dir}"
           destdir="${temp_dir}" 
           classpathref="compile.classpath"
           includeAntRuntime="false" excludes="**/sks/ws/**/*">
       <compilerarg value="-Xlint:-path"/>
    </javac>
    
    <!-- Now we can optionally update SKS WS code -->
    <antcall target="wsgen"/>

    <!-- Make a copy that we can patch... -->
    <copy todir="${temp_dir}" preservelastmodified="true">
      <fileset dir="${src_dir}">
        <include name="org/webpki/sks/ws/**/*.java"/>
      </fileset>
    </copy>
    <antcall target="_jdk7wsfix"/>

    <!-- Compile sks-ws java code from ${temp_dir} into ${temp_dir} -->
    <javac debug="${debug}"
           srcdir="${temp_dir}"
           destdir="${temp_dir}" 
           classpathref="compile.classpath"
           includeAntRuntime="false">
        <compilerarg value="-Xlint:-path"/>
        <compilerarg value="-XDignore.symbol.file"/>
    </javac>

    <!-- Build .NET package if applicable -->
    <condition property="dotnet.tools.available">
       <and>
         <os family="windows"/>
        <available file="nant.bat" type="file">
           <filepath>
             <pathelement path="${env.Path}"/>
           </filepath>
         </available>
       </and>
     </condition>
    <antcall target="_build_sks_ws_for_dotnet"/>
  </target>

  <target name="doc">
    <fail message="JAVA_HOME must be set to environment!" unless="env.JAVA_HOME"/>

    <!-- Create the documentation directory -->
    <mkdir dir="${doc_dir}" />

    <!-- Create temp directory -->
    <delete dir="${temp_dir}"/>
    <mkdir dir="${temp_dir}" />

    <!-- Copy all files  -->
    <copy todir="${temp_dir}">
      <fileset dir="${src_dir}"/>
    </copy>
    
    <!-- Remove reference to SUN class  -->
    <replace dir="${temp_dir}" value="">
       <include name="org/webpki/sks/**/*.java"/>
       <replacetoken><![CDATA[@com.sun.xml.ws.developer.SchemaValidation]]></replacetoken>
     </replace>

    <!-- Make documentation -->
    <javadoc destdir="${doc_dir}"
             author="true"
             version="true"
             Package="false"
             Use="false"
             nodeprecated="true"
             nodeprecatedlist="true"
             classpathref="compile.classpath"
             windowtitle="WebPKI.org Support">
      <packageset dir="${temp_dir}">
        <include name="org/**"/>
        <exclude name="org/**/test/**"/>
        <exclude name="org/**/kg2xml/**"/>
        <exclude name="org/**/wasp/**"/>
        <exclude name="org/**/sks/ws/**"/>
        <exclude name="org/**/sks/twolayer/**"/>
      </packageset>
      <link offline="true" href="http://download.oracle.com/javase/${javadoc-version}/docs/api/" packagelistLoc="${env.JAVA_HOME}\jsedocs\api"/>
      <link offline="true" href="http://download.oracle.com/javaee/6/api/" packagelistLoc="${env.JAVA_HOME}\jeedocs\api"/>
      <doctitle><![CDATA[<h1>WebPKI.org Support</h1>]]></doctitle>
      <bottom><![CDATA[<i>2005-2014 WebPKI.org.</i>]]></bottom>
    </javadoc>
    <java fork="yes"
          classname="org.webpki.tools.XSD2HTMLPrinter"
          failonerror="true">
        <classpath>
            <fileset dir="${dist_dir}">
               <include name="${webpki-libext}"/>
             </fileset>
        </classpath>
        <redirector output="${doc_dir}/keygen2schema.html"/>
        <arg value="${src_dir}/org/webpki/kg2xml/keygen2.xsd"/>
    </java>
    <antcall target="dockeygen2"/>
    <antcall target="docjcs"/>
    </target>

  <target name="dist" depends="clean,compile">    
    <!-- Create the distribution directory -->
    <mkdir dir="${dist_dir}" />

    <!-- Put everything from ${temp_dir} into jar files -->
    <jar jarfile="${dist_dir}/${webpki-libext}">
      <fileset dir="${temp_dir}">
        <exclude name="org/webpki/webutil/**"/>
        <exclude name="org/webpki/sks/ws/**"/>
        <exclude name="org/webpki/securityproxy/**"/>
      </fileset>
    </jar>

    <jar jarfile="${dist_dir}/${webpki-webutil}">
      <fileset dir="${temp_dir}">
        <include name="org/webpki/webutil/**"/>
      </fileset>
    </jar>

    <jar jarfile="${dist_dir}/${webpki-sksws}">
      <fileset dir="${temp_dir}">
        <include name="org/webpki/sks/ws/**"/>
        <exclude name="org/webpki/sks/ws/**/*.java"/>
      </fileset>
      <metainf dir="${wsdl_dir}"/>
    </jar>

    <jar jarfile="${dist_dir}/${webpki-securityproxy}">
      <fileset dir="${temp_dir}">
        <include name="org/webpki/securityproxy/**"/>
        <exclude name="org/webpki/securityproxy/test/**"/>
        <exclude name="org/webpki/securityproxy/*.png"/>
      </fileset>
    </jar>

    <!-- Compile generators just to check that they are still in concert with the code -->
    <javac debug="${debug}"
           srcdir="${src_generators}"
           destdir="${temp_dir}" 
           classpathref="compile.classpath"
           includeAntRuntime="false">
       <compilerarg value="-Xlint:-path"/>
    </javac>
    
  </target>

  <target name="_tomcat-server-bck" unless="tomcat.server.bck">
    <echo message="IMPORTANT: ${env.CATALINA_HOME}/conf/server.xml copied to server.xml.bck !!!"/>
    <copy tofile="${env.CATALINA_HOME}/conf/server.xml.bck" preservelastmodified="true" overwrite="true" file="${env.CATALINA_HOME}/conf/server.xml"/>
  </target>

  <target name="_tomcat-deploy" if="tomcat-deploy">
    <echo message="TOMCAT DEPLOY"/>
    <fail message="CATALINA_HOME must be set to environment!" unless="env.CATALINA_HOME"/>
    <condition property="tomcat.server.bck">
          <available file="${env.CATALINA_HOME}/conf/server.xml.bck"/>
    </condition>
    <antcall target="_tomcat-server-bck"/>
    <copy todir="${env.CATALINA_HOME}/lib" preservelastmodified="true" overwrite="true" file="${dist_dir}/${webpki-securityproxy}"/>
    <copy todir="${env.CATALINA_HOME}/securityproxy" preservelastmodified="true" overwrite="true" file="${dist_dir}/spts-proxychannel.war"/>
    <copy todir="${env.CATALINA_HOME}/securityproxy" preservelastmodified="true" overwrite="true" file="${dist_dir}/spts-extservice.war"/>
    <copy todir="${env.CATALINA_HOME}/conf" preservelastmodified="true" overwrite="true">
       <fileset dir="../securityproxy-test/tomcat.conf"/>
    </copy>
  </target>

  <target name="spts" description="Security Proxy Test Suite" depends="dist">

    <jar jarfile="${dist_dir}/spts-service.jar">
      <metainf dir="${spts_dir}">
        <include name="securityproxy.properties"/>
      </metainf>
      <manifest>
        <attribute name="Class-path" value="${webpki-libext} ${webpki-securityproxy}"/>
        <attribute name="Main-Class" value="org.webpki.securityproxy.test.localservice.TestService"/>
      </manifest>
      <fileset dir="${temp_dir}">
        <include name="org/webpki/securityproxy/test/localservice/**"/>
        <include name="org/webpki/securityproxy/test/common/**"/>
      </fileset>
    </jar>

    <jar jarfile="${dist_dir}/spts-testclient.jar">
      <metainf dir="${spts_dir}">
        <include name="securityproxy.properties"/>
      </metainf>
      <manifest>
        <attribute name="Class-path" value="${webpki-libext}"/>
        <attribute name="Main-Class" value="org.webpki.securityproxy.test.client.TestClient"/>
      </manifest>
      <fileset dir="${temp_dir}">
        <include name="org/webpki/securityproxy/test/client/**"/>
      </fileset>
    </jar>

    <war warfile="${dist_dir}/spts-proxychannel.war" webxml="${spts_dir}/proxychannel-web.xml"/>

    <war warfile="${dist_dir}/spts-extservice.war" webxml="${spts_dir}/extservice-web.xml">
      <classes dir="${temp_dir}">
        <include name="org/webpki/securityproxy/test/extservice/**"/>
        <include name="org/webpki/securityproxy/test/common/**"/>
      </classes>
    </war>

    <antcall target="_tomcat-deploy"/>

  </target>

  <target name="_test">
    <property name="sks.standalone" value="true"/>
    <mkdir dir="${test_dir}"/>
    <property name="test.dir" location="${test_dir}"/>
    <junit fork="yes" forkmode="once" haltonfailure="yes" tempdir="${test_dir}">
      <test name="${test.class}" unless="method"/>
      <test name="${test.class}" methods="${method}" if="method"/><!-- ANT 1.8.2 and up -->
        <sysproperty key="sks.implementation" value="${sks.implementation}"/>
        <sysproperty key="sks.device" value="${sks.device}"/>
        <sysproperty key="sks.auth.gui" value="${sks.auth.gui}"/>
        <sysproperty key="test.dir" value="${test.dir}"/>
        <sysproperty key="sks.standalone" value="${sks.standalone}"/>
        <sysproperty key="sks.referenceimplementation" value="${sks.referenceimplementation}"/>
        <sysproperty key="org.webpki.sks.ws.client.url" value="${sksws.url}"/>
      <formatter type="plain" usefile="false"/>
      <jvmarg value="-Djava.endorsed.dirs=${jax.ws.lib.dir}"/>
      <classpath refid="junit.classpath" />
    </junit>
  </target>

  <!-- JUnit test of the KeyGen2 protocol and the SKS API -->
  <target name="testkg2xml">
    <antcall target="_test">
       <param name="test.class" value="org.webpki.kg2xml.test.KeyGen2Test"/>
     </antcall>
  </target>

  <target name="testkeygen2">
    <antcall target="_test">
       <param name="test.class" value="org.webpki.keygen2.test.KeyGen2Test"/>
     </antcall>
  </target>
  
  <!-- JUnit test of the SKS API -->
  <target name="testsks">
    <antcall target="_test">
       <param name="test.class" value="org.webpki.sks.test.SKSTest"/>
     </antcall>
  </target>

  <!-- JUnit test of the JSON API.  The extra parameters for SKS/KeyGen2 are simply ignored... -->
  <target name="testjson">
    <antcall target="_test">
       <param name="test.class" value="org.webpki.json.test.JSONTest"/>
     </antcall>
  </target>
  
  <!-- Java to HTML -->
  <target name="_java2html">
    <echo message="Writing: ${doc.file}"/>

    <!-- Create temp directory -->
    <delete dir="${temp_dir}"/>
    <mkdir dir="${temp_dir}" />

    <!-- Copy all files  -->
    <copy todir="${temp_dir}">
      <fileset dir="${src_generators}"/>
    </copy>
    
    <!-- Compile all -->
    <javac debug="${debug}"
           srcdir="${src_dir}:${src_generators}"
           destdir="${temp_dir}" 
           classpathref="compile.classpath"
           includeAntRuntime="false">
       <compilerarg value="-Xlint:-path"/>
    </javac>
    <java fork="yes"
          classname="${doc.class}"
          failonerror="true"
          classpath="${temp_dir}">
        <arg value="${doc.file}"/>
    </java>
  </target>
  
  <!-- HTML Doc task for KeyGen2 -->
  <target name="dockeygen2">
    <antcall target="_java2html">
       <param name="doc.class" value="org.webpki.keygen2.KeyGen2HTMLReference"/>
       <param name="doc.file" value="${public_doc_dir}/keygen2.html"/>
     </antcall>
  </target>

  <!-- HTML Doc task for JCS -->
  <target name="docjcs">
    <antcall target="_java2html">
       <param name="doc.class" value="org.webpki.json.JSONSignatureHTMLReference"/>
       <param name="doc.file" value="${public_doc_dir}/jcs.html"/>
     </antcall>
  </target>
  
  <!-- A web service that accepts SKS WS calls from applications and in turn
       calls the designated SKS implementation -->
  <target name="sks-service">
    <echo message="SKS WS - Bind Address: ${sksws.url}"/>
    <java fork="yes"
          classname="org.webpki.sks.ws.server.SKSWSImplementation"
          failonerror="true">
        <classpath>
            <fileset dir="${dist_dir}">
               <include name="${webpki-libext}"/>
               <include name="${webpki-sksws}"/>
             </fileset>
             <fileset dir="${ext.jar}">
                <include name="*.jar"/>
             </fileset>
        </classpath>
        <jvmarg value="-Djava.endorsed.dirs=${jax.ws.lib.dir}"/>
        <jvmarg value="-Dsks.implementation=${sks.implementation}"/>
        <jvmarg value="-Dsks.auth.gui=${sks.auth.gui}"/>
        <jvmarg value="-Dsks.debug=${sks.debug}"/>
        <jvmarg value="-Dcom.sun.xml.ws.fault.SOAPFaultBuilder.disableCaptureStackTrace=false"/>
        <arg value="${sksws.url}"/>
    </java>
  </target>

  <target name="pkcs12import">
    <property name="format" value="NUMERIC"/>
    <property name="inputmethod" value="TRUSTED_GUI"/>
    <property name="grouping" value="NONE"/>
    <property name="appusage" value="UNIVERSAL"/>
    <property name="pincaching" value="false"/>
    <fail message="-&#10;Missing one or more of mandatory:&#10;
 -Dfile=&#10;
 -Dpassword=&#10;&#10;
optional:&#10;
 -Dpin=          [default: none]&#10;&#10;
applicable if pin has been set:&#10;
 -Dformat=  [default: ${format}]&#10;
 -Dinputmethod=  [default: ${inputmethod}]&#10;
 -Dgrouping=  [default: ${grouping}]&#10;
 -Dappusage=  [default: ${appusage}]&#10;
 -Dpincaching=  [default: ${pincaching}]">
       <condition>
         <not>
            <and>
            <isset property="file"/>
            <isset property="password"/>
           </and>
         </not>
       </condition>
     </fail>
    <condition property="pinandparams" value=" ${pin} ${format} ${inputmethod} ${grouping} ${appusage} ${pincaching}" else="">
      <isset property="pin"/>
    </condition>
    <java fork="yes"
          classname="org.webpki.sks.test.PKCS12Import"
          failonerror="true"
          dir="${user.dir}">
        <classpath>
            <fileset dir="${dist_dir}">
                   <include name="${webpki-libext}"/>
                   <include name="${webpki-sksws}"/>
             </fileset>
             <fileset dir="${ext.jar}">
                <include name="*.jar"/>
             </fileset>
        </classpath>
        <jvmarg value="-Djava.endorsed.dirs=${jax.ws.lib.dir}"/>
        <jvmarg value="-Dsks.client=${sks.ws.client}"/>
        <jvmarg value="-Dorg.webpki.sks.ws.client.url=${sksws.url}"/>
        <arg line="${file} ${password}${pinandparams}"/>
    </java>
  </target>

</project>

