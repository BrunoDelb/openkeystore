<?xml version="1.0"?>
<!-- NAnt build file for .NET SKSWS -->
<project name="SKSWS" default="build">
    <property name="client.library.name" value="org.webpki.sks.ws.client"/>
    <property name="test.library.name" value="org.webpki.sks.test"/>
    <property name="debug" value="false"/>
    <property name="rebuild" value="false" overwrite="false"/>
    <property name="build.dir" value="../dist"/>
    <property name="client.src.dir" value="client"/>
    <property name="test.src.dir" value="test"/>
    <property name="image.dir" value="../../resources/images"/>
    <property name="nant.settings.currentframework" value="net-4.0"/>

<!--
######################################################################
#            Builds the .NET SKS WS Client Assembly DLL              #
#                                                                    #
#    This library is self-contained and only depends on V4 of .NET   #
######################################################################
-->
    <target name="build">
      <csc target="library"
           output="${build.dir}/${client.library.name}.dll" 
           debug="${debug}"
           rebuild="${rebuild}"
           keyfile="b651fd748a51c307.snk">
            <sources basedir="${client.src.dir}">
                <include name="**/*.cs"/>
            </sources>
            <references>
                <include name="System.dll"/>
                <include name="System.Data.dll"/>
                <include name="System.ServiceModel.dll"/>
                <include name="System.Runtime.Serialization.dll"/>
                <include name="System.Xml.dll"/>
            </references>
            <resources prefix="sks" basedir="${image.dir}">
                <include name="encrypt.gif"/>
                <include name="idcard.gif"/>
                <include name="signsymb.gif"/>
                <include name="keyinfo.png"/>
            </resources>
        </csc>
    </target>
    
<!--
######################################################################
#            Builds the .NET SKS WS Test Assembly DLL                #
#                                                                    #
#    This library depends on BouncyCastle and V4 of .NET             #
######################################################################
-->
    <target name="test" depends="build">
      <csc target="library"
           output="${build.dir}/${test.library.name}.dll" 
           debug="${debug}"
           rebuild="${rebuild}"
           keyfile="b651fd748a51c307.snk">
            <sources basedir="${test.src.dir}">
                <include name="Device.cs"/>
                <include name="PINPol.cs"/>
                <include name="PUKPol.cs"/>
            </sources>
            <references>
                <include name="System.dll"/>
                <include name="System.Data.dll"/>
                <include name="System.ServiceModel.dll"/>
                <include name="System.Runtime.Serialization.dll"/>
                <include name="System.Xml.dll"/>
                <include name="../dist/${client.library.name}.dll" />
                <include name="third-party-dlls/BouncyCastle.Crypto.dll" />
            </references>
<!--
            <resources prefix="sks" basedir="${image.dir}">
                <include name="encrypt.gif"/>
                <include name="idcard.gif"/>
                <include name="signsymb.gif"/>
                <include name="keyinfo.png"/>
            </resources>
-->
        </csc>
    </target>

<!--
######################################################################
#   A small test program that signs data using the first available   #
#   key or a key specified by the command line option "-D:key=nnn".  #
#                                                                    #
#   Depends on the BouncyCastle library for signature verification.  #
######################################################################
-->
    <target name="sign" depends="build">
      <script language="C#">
          <references>
              <include name="System.Data.dll"/>
              <include name="System.dll"/>
              <include name="System.Core.dll"/>
              <include name="System.Runtime.Serialization.dll"/>
              <include name="System.ServiceModel.dll"/>
              <include name="System.Xml.dll"/>
              <include name="../dist/${client.library.name}.dll" />
              <include name="third-party-dlls/BouncyCastle.Crypto.dll" />
          </references>
          <imports>
              <import namespace="${client.library.name}" />
              <import namespace="System.Security.Cryptography" />
           </imports>
          <code>
            <![CDATA[
public static void ScriptMain(Project project)
{
   try
	{
        SKSWSProxy ws = SKSWSProxy.getDefaultSKSWSProxy();
        string device = project.Properties["device"];
        if (device != null)
        {
            foreach (string device_id in ws.listDevices ())
            {
               System.Console.WriteLine ("Device: " + device_id);
            }
            ws.DeviceID = device;
        }
        EnumeratedKey ek = new EnumeratedKey();
        while ((ek = ws.enumerateKeys(ek.KeyHandle)) != null)
        {
		    KeyAttributes ka = ws.getKeyAttributes(ek.KeyHandle);
		    if (ka.IsSymmetricKey) continue;
		    if (project.Properties["key"] != null && Int32.Parse(project.Properties["key"]) != ek.KeyHandle) continue;
		    bool rsa = ka.CertificatePath[0].PublicKey.IsRSA();
		    System.Console.WriteLine((rsa ? "RSA" : "EC") + " Key ID=#" + ek.KeyHandle + ", Subject: " + ka.CertificatePath[0].Subject);
		    string sign_alg = rsa ? "http://www.w3.org/2001/04/xmldsig-more#rsa-sha256" : "http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha256";
		    byte[] test_string = Encoding.UTF8.GetBytes("hi there!");
		    byte[] res = ws.signHashedData(ek.KeyHandle,
		                          		   sign_alg,
		                          	       null,
		                                   null,
		                                   new SHA256Managed().ComputeHash(test_string));
		    Org.BouncyCastle.Crypto.ISigner verify = Org.BouncyCastle.Security.SignerUtilities.GetSigner(rsa? "SHA256WithRSA" : "SHA256WithECDSA");
		    verify.Init(false, Org.BouncyCastle.Security.PublicKeyFactory.CreateKey(ka.CertificatePath[0].PublicKey.X509Encoding()));
		    verify.BlockUpdate(test_string, 0, test_string.Length);
		    if (!verify.VerifySignature(res))
			{
				throw new NAnt.Core.BuildException ("FAILED SIGNATURE VERIFICATION!!!");
			}
		    return;
        }
        throw new NAnt.Core.BuildException ("NO SUITABLE KEY FOUND!!!");
    }
	catch (SKSException e)
	{
        throw new NAnt.Core.BuildException("Signing: " + e.Message + " code=" + e.Error);
	}
}
            ]]>
          </code>
      </script>
    </target>

</project>