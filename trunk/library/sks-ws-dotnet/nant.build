<?xml version="1.0"?>
<!-- NAnt build file for .NET SKSWS -->
<project name="SKSWS" default="build">
    <property name="basename" value="org.webpki.sks.ws.client"/>
    <property name="debug" value="false"/>
    <property name="rebuild" value="false" overwrite="false"/>
    <property name="build.dir" value="../dist"/>
    <property name="src.dir" value="src"/>
    <property name="res.dir" value="res"/>
    <property name="nant.settings.currentframework" value="net-4.0"/>

<!--
######################################################################
#            Builds the .NET SKS WS Client Assembly DLL              #
#                                                                    #
#    This library is self-contained and only depends on V4 of .NET   #
######################################################################
-->
    <target name="build">
      <csc target="library"
           output="${build.dir}/${basename}.dll" 
           debug="${debug}"
           rebuild="${rebuild}"
           keyfile="b651fd748a51c307.snk">
            <sources basedir="${src.dir}">
                <include name="**/*.cs"/>
            </sources>
            <references>
                <include name="System.dll"/>
                <include name="System.Data.dll"/>
                <include name="System.ServiceModel.dll"/>
                <include name="System.Runtime.Serialization.dll"/>
                <include name="System.Xml.dll"/>
            </references>
            <resources prefix="sks" basedir="${res.dir}">
                <include name="*.*"/>
            </resources>
        </csc>
    </target>
    
<!--
######################################################################
#   A small test program that signs data using the first available   #
#   key or a key specified by the command line option "-D:key=nnn".  #
#                                                                    #
#   Depends on the BouncyCastle library for signature verification.  #
######################################################################
-->
    <target name="sign" depends="build">
      <script language="C#">
          <references>
                <include name="System.Data.dll"/>
                <include name="System.dll"/>
                <include name="System.Core.dll"/>
                 <include name="System.Runtime.Serialization.dll"/>
                <include name="System.ServiceModel.dll"/>
                <include name="System.Xml.dll"/>
              <include name="../dist/${basename}.dll" />
              <include name="third-party-dlls/BouncyCastle.Crypto.dll" />
          </references>
          <imports>
              <import namespace="${basename}" />
              <import namespace="System.Security.Cryptography" />
           </imports>
          <code>
            <![CDATA[
public static void ScriptMain(Project project)
{
    SKSWSProxy ws = SKSWSProxy.getDefaultSKSWSProxy();
    EnumeratedKey ek = new EnumeratedKey();
    while ((ek = ws.enumerateKeys(ek.KeyHandle)) != null)
    {
       try
       {
           KeyAttributes ka = ws.getKeyAttributes(ek.KeyHandle);
           if (ka.IsSymmetricKey) continue;
           if (project.Properties["key"] != null && Int32.Parse(project.Properties["key"]) != ek.KeyHandle) continue;
           bool rsa = ka.CertificatePath[0].PublicKey.IsRSA();
           System.Console.WriteLine((rsa ? "RSA" : "EC") + " Key ID=#" + ek.KeyHandle + ", Subject: " + ka.CertificatePath[0].Subject);
           string sign_alg = rsa ? "http://www.w3.org/2001/04/xmldsig-more#rsa-sha256" : "http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha256";
           byte[] test_string = Encoding.UTF8.GetBytes("hi there!");
           byte[] res = ws.signHashedData(ek.KeyHandle,
			                              sign_alg,
			                              null,
			                              null,
			                              new SHA256Managed().ComputeHash(test_string));
           Org.BouncyCastle.Crypto.ISigner verify = Org.BouncyCastle.Security.SignerUtilities.GetSigner(rsa? "SHA256WithRSA" : "SHA256WithECDSA");
           verify.Init(false, Org.BouncyCastle.Security.PublicKeyFactory.CreateKey(ka.CertificatePath[0].PublicKey.X509Encoding()));
           verify.BlockUpdate(test_string, 0, test_string.Length);
           if (!verify.VerifySignature(res))
             {
	             throw new NAnt.Core.BuildException ("FAILED SIGNATURE VERIFICATION!!!");
             }
       }
       catch (System.ServiceModel.FaultException<SKSException> e)
       {
           throw new NAnt.Core.BuildException("Signing: " + e.Detail.getMessage() + " code=" + e.Detail.getError());
       }
       return;
    }
    throw new NAnt.Core.BuildException ("NO SUITABLE KEY FOUND!!!");
}
            ]]>
          </code>
      </script>
    </target>

</project>