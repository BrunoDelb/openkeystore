/*
 *  Copyright 2006-2011 WebPKI.org (http://webpki.org).
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */
namespace org.webpki.sks.ws.client
{

        ///////////////////////////////////////////////
        // Generated by WSCreator 1.0 - Do not edit! //
        ///////////////////////////////////////////////

    using System.Collections.Generic;

    /*
     *  This is the .NET client :-)
     */
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://xmlns.webpki.org/sks/v0.61")]
    public interface SKSWSProxyInterface
    {
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.FaultContractAttribute(typeof(SKSExceptionAttributes), Action="", Name="SKSException")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        abortProvisioningSessionResponse abortProvisioningSession(abortProvisioningSessionRequest request);

        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.FaultContractAttribute(typeof(SKSExceptionAttributes), Action="", Name="SKSException")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        getKeyProtectionInfoResponse getKeyProtectionInfo(getKeyProtectionInfoRequest request);

        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.FaultContractAttribute(typeof(SKSExceptionAttributes), Action="", Name="SKSException")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        setCertificatePathResponse setCertificatePath(setCertificatePathRequest request);

        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        getVersionResponse getVersion(getVersionRequest request);
    }

    public class SKSWSProxy : System.ServiceModel.ClientBase<SKSWSProxyInterface>
    {
        public SKSWSProxy()
        {
        }

        public SKSWSProxy(string endpointConfigurationName) : base(endpointConfigurationName)
        {
        }

        public SKSWSProxy(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : base(binding, remoteAddress)
        {
        }

        public void abortProvisioningSession(int keyHandle)
        (
        }

        public void getKeyProtectionInfo(int key_handle, out string protection_status, out sbyte blah, out List<byte[]> x509_certificate)
        (
        }

        public void setCertificatePath(int key_handle, List<byte[]> x509_certificate, byte[] mac)
        (
        }

        public string getVersion()
        (
        }
    }
}
