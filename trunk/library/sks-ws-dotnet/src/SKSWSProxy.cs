/*
 *  Copyright 2006-2011 WebPKI.org (http://webpki.org).
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */
namespace org.webpki.sks.ws.client
{

        ///////////////////////////////////////////////
        // Generated by WSCreator 1.0 - Do not edit! //
        ///////////////////////////////////////////////

    using System.Collections.Generic;

    using System.Security.Cryptography.X509Certificates;

    /*
     *  This is the .NET client :-)
     */
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://xmlns.webpki.org/sks/v0.61")]
    public interface SKSWSProxyInterface
    {
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.FaultContractAttribute(typeof(SKSException), Action="", Name="SKSException")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        abortProvisioningSession_Response abortProvisioningSession(abortProvisioningSession_Request request);

        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.FaultContractAttribute(typeof(SKSException), Action="", Name="SKSException")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        getKeyProtectionInfo_Response getKeyProtectionInfo(getKeyProtectionInfo_Request request);

        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.FaultContractAttribute(typeof(SKSException), Action="", Name="SKSException")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        setCertificatePath_Response setCertificatePath(setCertificatePath_Request request);

        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        getVersion_Response getVersion(getVersion_Request request);

        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        getCertPath_Response getCertPath(getCertPath_Request request);
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public class SKSException : System.Xml.Serialization.IXmlSerializable
    {
        private System.Xml.XmlNode[] nodes;

        public System.Xml.Schema.XmlSchema GetSchema()
        {
            return null;
        }

        public void ReadXml(System.Xml.XmlReader reader)
        {
            nodes = System.Runtime.Serialization.XmlSerializableServices.ReadNodes(reader);
        }

        public void WriteXml(System.Xml.XmlWriter writer)
        {
            System.Runtime.Serialization.XmlSerializableServices.WriteNodes(writer, nodes);
        }

        public int getError()
        {
            return System.Int32.Parse(nodes[0].InnerXml);
        }

        public string getMessage()
        {
            return nodes[1].InnerXml;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ServiceModel.MessageContractAttribute(WrapperName="abortProvisioningSession", WrapperNamespace="http://xmlns.webpki.org/sks/v0.61", IsWrapped=true)]
    public class abortProvisioningSession_Request
    {
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v0.61", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="keyHandle", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int keyHandle;

        public abortProvisioningSession_Request()
        {
        }

        public abortProvisioningSession_Request(int keyHandle)
        {
            this.keyHandle = keyHandle;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ServiceModel.MessageContractAttribute(WrapperName="abortProvisioningSession.Response", WrapperNamespace="http://xmlns.webpki.org/sks/v0.61", IsWrapped=true)]
    public class abortProvisioningSession_Response
    {
        public abortProvisioningSession_Response()
        {
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ServiceModel.MessageContractAttribute(WrapperName="getKeyProtectionInfo", WrapperNamespace="http://xmlns.webpki.org/sks/v0.61", IsWrapped=true)]
    public class getKeyProtectionInfo_Request
    {
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v0.61", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="keyHandle", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int key_handle;

        public getKeyProtectionInfo_Request()
        {
        }

        public getKeyProtectionInfo_Request(int key_handle)
        {
            this.key_handle = key_handle;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ServiceModel.MessageContractAttribute(WrapperName="getKeyProtectionInfo.Response", WrapperNamespace="http://xmlns.webpki.org/sks/v0.61", IsWrapped=true)]
    public class getKeyProtectionInfo_Response
    {
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v0.61", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="ProtectionStatus", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string protection_status;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v0.61", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="blah", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public sbyte blah;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v0.61", Order=2)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="X509Certificate", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public List<byte[]> certificate_path;

        public getKeyProtectionInfo_Response()
        {
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ServiceModel.MessageContractAttribute(WrapperName="setCertificatePath", WrapperNamespace="http://xmlns.webpki.org/sks/v0.61", IsWrapped=true)]
    public class setCertificatePath_Request
    {
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v0.61", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="KeyHandle", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int key_handle;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v0.61", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="X509Certificate", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public List<byte[]> certificate_path;

        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v0.61", Order=2)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="MAC", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public byte[] mac;

        public setCertificatePath_Request()
        {
        }

        public setCertificatePath_Request(int key_handle, List<byte[]> certificate_path, byte[] mac)
        {
            this.key_handle = key_handle;
            this.certificate_path = certificate_path;
            this.mac = mac;
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ServiceModel.MessageContractAttribute(WrapperName="setCertificatePath.Response", WrapperNamespace="http://xmlns.webpki.org/sks/v0.61", IsWrapped=true)]
    public class setCertificatePath_Response
    {
        public setCertificatePath_Response()
        {
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ServiceModel.MessageContractAttribute(WrapperName="getVersion", WrapperNamespace="http://xmlns.webpki.org/sks/v0.61", IsWrapped=true)]
    public class getVersion_Request
    {
        public getVersion_Request()
        {
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ServiceModel.MessageContractAttribute(WrapperName="getVersion.Response", WrapperNamespace="http://xmlns.webpki.org/sks/v0.61", IsWrapped=true)]
    public class getVersion_Response
    {
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v0.61", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string @return;

        public getVersion_Response()
        {
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ServiceModel.MessageContractAttribute(WrapperName="getCertPath", WrapperNamespace="http://xmlns.webpki.org/sks/v0.61", IsWrapped=true)]
    public class getCertPath_Request
    {
        public getCertPath_Request()
        {
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ServiceModel.MessageContractAttribute(WrapperName="getCertPath.Response", WrapperNamespace="http://xmlns.webpki.org/sks/v0.61", IsWrapped=true)]
    public class getCertPath_Response
    {
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xmlns.webpki.org/sks/v0.61", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(ElementName="X509Certificate", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public List<byte[]> @return;

        public getCertPath_Response()
        {
        }
    }

    public class SKSWSProxy : System.ServiceModel.ClientBase<SKSWSProxyInterface>
    {
        X509Certificate2[] blist2certs (List<byte[]> blist)
        {
            X509Certificate2[] certs = new X509Certificate2[blist.Count];
            int i = 0;
            foreach (byte[] b_arr in blist)
            {
                certs[i++] = new X509Certificate2(b_arr);
            }
            return i == 0 ? null : certs;
        }

        List<byte[]> certs2blist (X509Certificate2[] certs)
        {
            List<byte[]> blist = new List<byte[]>();
            if (certs != null) foreach (X509Certificate2 cert in certs)
            {
                blist.Add (cert.RawData);
            }
            return blist;
        }

        public static SKSWSProxy getDefaultSKSWSProxy()
        {
            Microsoft.Win32.RegistryKey reg_entry = Microsoft.Win32.RegistryKey.OpenBaseKey(Microsoft.Win32.RegistryHive.LocalMachine,
                                                                        System.Environment.Is64BitOperatingSystem ?
                                                                          Microsoft.Win32.RegistryView.Registry64 : Microsoft.Win32.RegistryView.Registry32)
                .OpenSubKey(@"SOFTWARE\WebPKI.org");
            string ws_url = reg_entry == null ? null : (string) reg_entry.GetValue ("SKSWSURL");
            if (ws_url == null)
            {
                 throw new System.ArgumentException(@"No such registry entry: SOFTWARE\WebPKI.org\SKSWSURL");
            }
            System.ServiceModel.BasicHttpBinding ws_bind = new System.ServiceModel.BasicHttpBinding();
            ws_bind.SendTimeout = System.TimeSpan.FromMinutes(5);
            return new SKSWSProxy(ws_bind, new System.ServiceModel.EndpointAddress(ws_url));
        }

        public SKSWSProxy(string endpointConfigurationName) : base(endpointConfigurationName)
        {
        }

        public SKSWSProxy(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : base(binding, remoteAddress)
        {
        }

        public void abortProvisioningSession(int keyHandle)
        {
            base.Channel.abortProvisioningSession(new abortProvisioningSession_Request(keyHandle));
        }

        public void getKeyProtectionInfo(int key_handle, out string protection_status, out sbyte blah, out X509Certificate2[] certificate_path)
        {
            getKeyProtectionInfo_Response _res = base.Channel.getKeyProtectionInfo(new getKeyProtectionInfo_Request(key_handle));
            protection_status = _res.protection_status;
            blah = _res.blah;
            certificate_path = blist2certs(_res.certificate_path);
        }

        public void setCertificatePath(int key_handle, X509Certificate2[] certificate_path, byte[] mac)
        {
            base.Channel.setCertificatePath(new setCertificatePath_Request(key_handle, certs2blist(certificate_path), mac));
        }

        public string getVersion()
        {
            return base.Channel.getVersion(new getVersion_Request()).@return;
        }

        public X509Certificate2[] getCertPath()
        {
            getCertPath_Response _res = base.Channel.getCertPath(new getCertPath_Request());
            return blist2certs(_res.@return);
        }
    }
}
