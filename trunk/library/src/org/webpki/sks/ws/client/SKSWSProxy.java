/*
 *  Copyright 2006-2011 WebPKI.org (http://webpki.org).
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */
package org.webpki.sks.ws.client;

        ///////////////////////////////////////////////
        // Generated by WSCreator 1.0 - Do not edit! //
        ///////////////////////////////////////////////

import java.util.List;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;

import javax.xml.ws.Holder;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;

/**
 *  This is the client :-)
 */
@WebService(serviceName="SKSWS",
            targetNamespace="http://xmlns.webpki.org/sks/v0.61")
public interface SKSWSProxy
  {
    @WebMethod(operationName="abortProvisioningSession")
    @RequestWrapper(localName="abortProvisioningSession", targetNamespace="http://xmlns.webpki.org/sks/v0.61")
    @ResponseWrapper(localName="abortProvisioningSession.Response", targetNamespace="http://xmlns.webpki.org/sks/v0.61")
    public void abortProvisioningSession (@WebParam(name="keyHandle")
                                          int keyHandle)
    throws SKSException_Exception;

    @WebMethod(operationName="getKeyProtectionInfo")
    @RequestWrapper(localName="getKeyProtectionInfo", targetNamespace="http://xmlns.webpki.org/sks/v0.61")
    @ResponseWrapper(localName="getKeyProtectionInfo.Response", targetNamespace="http://xmlns.webpki.org/sks/v0.61")
    @WebResult(name="return")
    public int getKeyProtectionInfo (@WebParam(name="keyHandle")
                                     int key_handle,
                                     @WebParam(name="ProtectionStatus", mode=WebParam.Mode.INOUT)
                                     Holder<String> protection_status,
                                     @WebParam(name="blah", mode=WebParam.Mode.OUT)
                                     Holder<Byte> blah,
                                     @WebParam(name="X509Certificate", mode=WebParam.Mode.OUT)
                                     Holder<List<byte[]>> certificate_path)
    throws SKSException_Exception;

    @WebMethod(operationName="setCertificatePath")
    @RequestWrapper(localName="setCertificatePath", targetNamespace="http://xmlns.webpki.org/sks/v0.61")
    @ResponseWrapper(localName="setCertificatePath.Response", targetNamespace="http://xmlns.webpki.org/sks/v0.61")
    public void setCertificatePath (@WebParam(name="KeyHandle")
                                    int key_handle,
                                    @WebParam(name="X509Certificate")
                                    List<byte[]> certificate_path,
                                    @WebParam(name="MAC")
                                    byte[] mac)
    throws SKSException_Exception;

    @WebMethod(operationName="getVersion")
    @RequestWrapper(localName="getVersion", targetNamespace="http://xmlns.webpki.org/sks/v0.61")
    @ResponseWrapper(localName="getVersion.Response", targetNamespace="http://xmlns.webpki.org/sks/v0.61")
    @WebResult(name="return")
    public String getVersion ();

    @WebMethod(operationName="getCertPath")
    @RequestWrapper(localName="getCertPath", targetNamespace="http://xmlns.webpki.org/sks/v0.61")
    @ResponseWrapper(localName="getCertPath.Response", targetNamespace="http://xmlns.webpki.org/sks/v0.61")
    @WebResult(name="X509Certificate")
    public List<byte[]> getCertPath (@WebParam(name="want")
                                     boolean want)
    throws SKSException_Exception;
  }
