/*
 *  Copyright 2006-2011 WebPKI.org (http://webpki.org).
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */
package org.webpki.sks.ws.server;

        ///////////////////////////////////////////////
        // Generated by WSCreator 1.0 - Do not edit! //
        ///////////////////////////////////////////////

import java.io.IOException;

import java.security.GeneralSecurityException;
import java.security.KeyFactory;
import java.security.PublicKey;
import java.security.Security;

import java.security.cert.X509Certificate;

import java.security.interfaces.ECPublicKey;
import java.security.interfaces.RSAPublicKey;

import java.security.spec.X509EncodedKeySpec;

import java.util.ArrayList;
import java.util.List;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;

import javax.xml.ws.Endpoint;
import javax.xml.ws.Holder;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;

import org.bouncycastle.jce.provider.BouncyCastleProvider;

import org.webpki.crypto.CertificateUtil;

import org.webpki.crypto.test.DemoKeyStore;

import org.webpki.sks.DeviceInfo;
import org.webpki.sks.EnumeratedKey;
import org.webpki.sks.EnumeratedProvisioningSession;
import org.webpki.sks.Extension;
import org.webpki.sks.KeyAttributes;
import org.webpki.sks.KeyData;
import org.webpki.sks.KeyProtectionInfo;
import org.webpki.sks.PatternRestriction;
import org.webpki.sks.ProvisioningSession;
import org.webpki.sks.SKSException;
import org.webpki.sks.SecureKeyStore;

/**
 * SKS Web Service Implementation.
 *
 * The purpose of the Web Service is creating a "singleton"
 * service that can concurrently be called by arbitrary
 * SKS-using applications.  The Web Service can be connected
 * to any conformant SKS implementation.
 */ 
@com.sun.xml.ws.developer.SchemaValidation
@WebService(serviceName="SKSWS",
            targetNamespace="http://xmlns.webpki.org/sks/v1.00",
            name="SKSWS.Interface",
            portName="SKSWS.Port",
            wsdlLocation="META-INF/SKSWS.wsdl")
public class SKSWSImplementation
  {

    static SecureKeyStore sks;
    
    static DeviceInfo device_info;
    
    static
      {
        try
          {
            Security.insertProviderAt (new BouncyCastleProvider(), 1);
            sks = (SecureKeyStore) Class.forName (System.getProperty ("sks.implementation")).newInstance ();
            device_info = sks.getDeviceInfo ();
            System.out.println ("Device: " + device_info.getVendorDescription ());
            System.out.println ("Vendor: " + device_info.getVendorName ());
            System.out.println ("API Version: " + device_info.getAPILevel ());
          }
        catch (ClassNotFoundException e)
          {
            throw new RuntimeException (e);
          }
        catch (InstantiationException e)
          {
            throw new RuntimeException (e);
          }
        catch (IllegalAccessException e)
          {
            throw new RuntimeException (e);
          }
        catch (SKSException e)
          {
            throw new RuntimeException (e);
          }
      }
    
    void log (String message)
      {
        System.out.println (message);
      }

    PublicKey createPublicKeyFromBlob (byte[] blob) throws SKSException
      {
        X509EncodedKeySpec ks = new X509EncodedKeySpec (blob);
        KeyFactory kf = null;
        try
          {
            kf = KeyFactory.getInstance ("RSA");
            return kf.generatePublic(ks);
          }
        catch (GeneralSecurityException e1)
          {
            try
              {
                kf = KeyFactory.getInstance ("EC");
                return kf.generatePublic(ks);
              }
            catch (GeneralSecurityException e2)
              {
                throw new SKSException (e2);
              }
          }
      }
      
    ECPublicKey getECPublicKey (byte[] blob) throws SKSException
      {
        PublicKey public_key = createPublicKeyFromBlob (blob);
        if (public_key instanceof ECPublicKey)
          {
            return (ECPublicKey) public_key;
          }
        throw new SKSException ("Expected EC key");
      }

    @WebMethod(operationName="getDeviceInfo")
    @RequestWrapper(localName="getDeviceInfo", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @ResponseWrapper(localName="getDeviceInfo.Response", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    public void getDeviceInfo (@WebParam(name="APILevel", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                               Holder<Short> api_level,
                               @WebParam(name="UpdateURL", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                               Holder<String> update_url,
                               @WebParam(name="VendorName", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                               Holder<String> vendor_name,
                               @WebParam(name="VendorDescription", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                               Holder<String> vendor_description,
                               @WebParam(name="X509Certificate", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                               Holder<List<byte[]>> certificate_path,
                               @WebParam(name="SupportedAlgorithm", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                               Holder<List<String>> supported_algorithms,
                               @WebParam(name="RSAExponentSupport", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                               Holder<Boolean> rsa_exponent_support,
                               @WebParam(name="RSAKeySize", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                               Holder<List<Short>> rsa_key_sizes,
                               @WebParam(name="CryptoDataSize", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                               Holder<Integer> crypto_data_size,
                               @WebParam(name="ExtensionDataSize", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                               Holder<Integer> extension_data_size,
                               @WebParam(name="DevicePINSupport", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                               Holder<Boolean> device_pin_support,
                               @WebParam(name="BiometricSupport", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                               Holder<Boolean> biometric_support)
    throws SKSException
      {
        log ("getDeviceInfo ()");
        try
          {
            DeviceInfo device_info = sks.getDeviceInfo ();
            api_level.value = device_info.getAPILevel ();
            update_url.value = device_info.getUpdateURL ();
            vendor_name.value = device_info.getVendorName ();
            vendor_description.value = device_info.getVendorDescription ();
            certificate_path.value = new ArrayList<byte[]> ();
            for (X509Certificate cert : device_info.getCertificatePath ())
              {
                certificate_path.value.add (cert.getEncoded ());
              }
            supported_algorithms.value = new ArrayList<String> ();
            for (String alg : device_info.getSupportedAlgorithms ())
              {
                supported_algorithms.value.add (alg);
              }
            rsa_exponent_support.value = device_info.getRSAExponentSupport ();
            rsa_key_sizes.value = new ArrayList<Short> ();
            for (short size : device_info.getRSAKeySizes ())
              {
                rsa_key_sizes.value.add (size);
              }
            crypto_data_size.value = device_info.getCryptoDataSize ();
            extension_data_size.value = device_info.getExtensionDataSize ();
            device_pin_support.value = device_info.getDevicePINSupport ();
            biometric_support.value = device_info.getBiometricSupport ();
          }
        catch (GeneralSecurityException e)
          {
            throw new SKSException (e);
          }
      }

    @WebMethod(operationName="createProvisioningSession")
    @RequestWrapper(localName="createProvisioningSession", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @ResponseWrapper(localName="createProvisioningSession.Response", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @WebResult(name="ProvisioningHandle", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    public int createProvisioningSession (@WebParam(name="Algorithm", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                          String algorithm,
                                          @WebParam(name="ServerSessionID", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                          String server_session_id,
                                          @WebParam(name="ServerEphemeralKey", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                          byte[] server_ephemeral_key,
                                          @WebParam(name="IssuerURI", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                          String issuer_uri,
                                          @WebParam(name="KeyManagementKey", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                          byte[] key_management_key,
                                          @WebParam(name="ClientTime", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                          int client_time,
                                          @WebParam(name="SessionLifeTime", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                          int session_life_time,
                                          @WebParam(name="SessionKeyLimit", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                          short session_key_limit,
                                          @WebParam(name="ClientSessionID", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                                          Holder<String> client_session_id,
                                          @WebParam(name="ClientEphemeralKey", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                                          Holder<byte[]> client_ephemeral_key,
                                          @WebParam(name="Attestation", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                                          Holder<byte[]> attestation)
    throws SKSException
      {
/*
        System.out.println ("SERV=" + (server_ephemeral_key == null ? "NULL" : server_ephemeral_key.length) + " KMK=" + (key_management_key == null ? "NULL" : key_management_key.length));
        try
          {
        org.webpki.asn1.BaseASN1Object o = org.webpki.asn1.DerDecoder.decode(server_ephemeral_key, 0);
        System.out.println(o.toString (true, true));
          }
        catch (IOException e)
          {
            System.out.println ("ASN1" + e.getMessage ());
          }
*/
        ProvisioningSession sess = sks.createProvisioningSession (algorithm,
                                                                  server_session_id,
                                                                  getECPublicKey (server_ephemeral_key),
                                                                  issuer_uri,
                                                                  key_management_key == null ? null : createPublicKeyFromBlob (key_management_key),
                                                                  client_time,
                                                                  session_life_time,
                                                                  session_key_limit);
        client_session_id.value = sess.getClientSessionID ();
        client_ephemeral_key.value = sess.getClientEphemeralKey ().getEncoded ();
        attestation.value = sess.getAttestation ();
        log ("createProvisioningSession () : ProvisioningHandle=" + sess.getProvisioningHandle ());
        return sess.getProvisioningHandle ();
      }

    @WebMethod(operationName="closeProvisioningSession")
    @RequestWrapper(localName="closeProvisioningSession", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @ResponseWrapper(localName="closeProvisioningSession.Response", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @WebResult(name="Attestation", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    public byte[] closeProvisioningSession (@WebParam(name="ProvisioningHandle", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                            int provisioning_handle,
                                            @WebParam(name="Nonce", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                            byte[] nonce,
                                            @WebParam(name="MAC", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                            byte[] mac)
    throws SKSException
      {
        log ("closeProvisioningSession (ProvisioningHandle=" + provisioning_handle + ")");
        return sks.closeProvisioningSession (provisioning_handle, nonce, mac);
      }

    @WebMethod(operationName="enumerateProvisioningSessions")
    @RequestWrapper(localName="enumerateProvisioningSessions", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @ResponseWrapper(localName="enumerateProvisioningSessions.Response", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @WebResult(name="ProvisioningHandle", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    public int enumerateProvisioningSessions (@WebParam(name="ProvisioningHandle", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                              int provisioning_handle,
                                              @WebParam(name="ProvisioningState", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                              boolean provisioning_state,
                                              @WebParam(name="KeyManagementKey", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                                              Holder<byte[]> key_management_key,
                                              @WebParam(name="ClientTime", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                                              Holder<Integer> client_time,
                                              @WebParam(name="SessionLifeTime", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                                              Holder<Integer> session_life_time,
                                              @WebParam(name="ServerSessionID", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                                              Holder<String> server_session_id,
                                              @WebParam(name="ClientSessionID", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                                              Holder<String> client_session_id,
                                              @WebParam(name="IssuerURI", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                                              Holder<String> issuer_uri)
    throws SKSException
      {
        EnumeratedProvisioningSession eps = sks.enumerateProvisioningSessions (provisioning_handle, provisioning_state);
        if (eps == null)
          {
            eps = new EnumeratedProvisioningSession ();  // Back to square #1
          }
        else
          {
            key_management_key.value = eps.getKeyManagementKey () == null ? null : eps.getKeyManagementKey ().getEncoded ();
            client_time.value = eps.getClientTime ();
            session_life_time.value = eps.getSessionLifeTime ();
            server_session_id.value = eps.getServerSessionID ();
            client_session_id.value = eps.getClientSessionID ();
            issuer_uri.value = eps.getIssuerURI ();
          }
        log ("enumerateProvisioningSessions (ProvisioningHandle=" + provisioning_handle + ") : ProvisioningHandle=" + eps.getProvisioningHandle ());
        return eps.getProvisioningHandle ();
      }

    @WebMethod(operationName="abortProvisioningSession")
    @RequestWrapper(localName="abortProvisioningSession", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @ResponseWrapper(localName="abortProvisioningSession.Response", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    public void abortProvisioningSession (@WebParam(name="ProvisioningHandle", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                          int provisioning_handle)
    throws SKSException
      {
        log ("abortProvisioningSession (ProvisioningHandle=" + provisioning_handle + ")");
        sks.abortProvisioningSession (provisioning_handle);
      }

    @WebMethod(operationName="signProvisioningSessionData")
    @RequestWrapper(localName="signProvisioningSessionData", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @ResponseWrapper(localName="signProvisioningSessionData.Response", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @WebResult(name="Result", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    public byte[] signProvisioningSessionData (@WebParam(name="ProvisioningHandle", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                               int provisioning_handle,
                                               @WebParam(name="Data", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                               byte[] data)
    throws SKSException
      {
        log ("signProvisioningSessionData (ProvisioningHandle=" + provisioning_handle + ")");
        return sks.signProvisioningSessionData (provisioning_handle, data);
      }

    @WebMethod(operationName="createPUKPolicy")
    @RequestWrapper(localName="createPUKPolicy", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @ResponseWrapper(localName="createPUKPolicy.Response", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @WebResult(name="PUKPolicyHandle", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    public int createPUKPolicy (@WebParam(name="ProvisioningHandle", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                int provisioning_handle,
                                @WebParam(name="ID", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                String id,
                                @WebParam(name="PUKValue", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                byte[] puk_value,
                                @WebParam(name="Format", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                byte format,
                                @WebParam(name="RetryLimit", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                short retry_limit,
                                @WebParam(name="MAC", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                byte[] mac)
    throws SKSException
      {
        log ("createPUKPolicy (ID=" + id + ")");
        return sks.createPUKPolicy (provisioning_handle,
                                    id,
                                    puk_value,
                                    format,
                                    retry_limit,
                                    mac);
      }

    @WebMethod(operationName="createPINPolicy")
    @RequestWrapper(localName="createPINPolicy", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @ResponseWrapper(localName="createPINPolicy.Response", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @WebResult(name="PINPolicyHandle", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    public int createPINPolicy (@WebParam(name="ProvisioningHandle", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                int provisioning_handle,
                                @WebParam(name="ID", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                String id,
                                @WebParam(name="PUKPolicyHandle", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                int puk_policy_handle,
                                @WebParam(name="UserDefined", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                boolean user_defined,
                                @WebParam(name="UserModifiable", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                boolean user_modifiable,
                                @WebParam(name="Format", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                byte format,
                                @WebParam(name="RetryLimit", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                short retry_limit,
                                @WebParam(name="Grouping", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                byte grouping,
                                @WebParam(name="PatternRestrictions", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                byte pattern_restrictions,
                                @WebParam(name="MinLength", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                short min_length,
                                @WebParam(name="MaxLength", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                short max_length,
                                @WebParam(name="InputMethod", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                byte input_method,
                                @WebParam(name="MAC", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                byte[] mac)
    throws SKSException
      {
        log ("createPINPolicy (ID=" + id + ")");
        return sks.createPINPolicy (provisioning_handle,
                                    id,
                                    puk_policy_handle,
                                    user_defined,
                                    user_modifiable,
                                    format,
                                    retry_limit,
                                    grouping,
                                    pattern_restrictions,
                                    min_length,
                                    max_length,
                                    input_method,
                                    mac);
      }

    @WebMethod(operationName="createKeyEntry")
    @RequestWrapper(localName="createKeyEntry", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @ResponseWrapper(localName="createKeyEntry.Response", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @WebResult(name="KeyHandle", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    public int createKeyEntry (@WebParam(name="ProvisioningHandle", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                               int provisioning_handle,
                               @WebParam(name="ID", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                               String id,
                               @WebParam(name="Algorithm", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                               String algorithm,
                               @WebParam(name="ServerSeed", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                               byte[] server_seed,
                               @WebParam(name="DevicePINProtection", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                               boolean device_pin_protection,
                               @WebParam(name="PINPolicyHandle", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                               int pin_policy_handle,
                               @WebParam(name="PINValue", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                               byte[] pin_value,
                               @WebParam(name="EnablePINCaching", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                               boolean enable_pin_caching,
                               @WebParam(name="BiometricProtection", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                               byte biometric_protection,
                               @WebParam(name="ExportProtection", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                               byte export_protection,
                               @WebParam(name="DeleteProtection", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                               byte delete_protection,
                               @WebParam(name="AppUsage", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                               byte app_usage,
                               @WebParam(name="FriendlyName", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                               String friendly_name,
                               @WebParam(name="PrivateKeyBackup", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                               boolean private_key_backup,
                               @WebParam(name="KeySpecifier", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                               byte[] key_specifier,
                               @WebParam(name="EndorsedAlgorithm", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                               List<String> endorsed_algorithms,
                               @WebParam(name="MAC", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                               byte[] mac,
                               @WebParam(name="PublicKey", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                               Holder<byte[]> public_key,
                               @WebParam(name="Attestation", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                               Holder<byte[]> attestation,
                               @WebParam(name="PrivateKey", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                               Holder<byte[]> private_key)
    throws SKSException
      {
        KeyData kd = sks.createKeyEntry (provisioning_handle,
                                         id,
                                         algorithm,
                                         server_seed,
                                         device_pin_protection,
                                         pin_policy_handle,
                                         pin_value,
                                         enable_pin_caching,
                                         biometric_protection,
                                         export_protection,
                                         delete_protection,
                                         app_usage,
                                         friendly_name,
                                         private_key_backup,
                                         key_specifier,
                                         endorsed_algorithms.toArray (new String[0]),
                                         mac);
        public_key.value = kd.getPublicKey ().getEncoded ();
        attestation.value = kd.getAttestation ();
        private_key.value = kd.getPrivateKey ();
        log ("createKeyEntry (ID=" + id + ") : KeyHandle=" + kd.getKeyHandle ());
        return kd.getKeyHandle ();
      }

    @WebMethod(operationName="getKeyHandle")
    @RequestWrapper(localName="getKeyHandle", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @ResponseWrapper(localName="getKeyHandle.Response", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @WebResult(name="KeyHandle", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    public int getKeyHandle (@WebParam(name="ProvisioningHandle", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                             int provisioning_handle,
                             @WebParam(name="ID", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                             String id)
    throws SKSException
      {
        log ("getKeyHandle (ProvisioningHandle=" + provisioning_handle + ", ID=" + id + ")");
        return sks.getKeyHandle (provisioning_handle, id);
      }

    @WebMethod(operationName="setCertificatePath")
    @RequestWrapper(localName="setCertificatePath", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @ResponseWrapper(localName="setCertificatePath.Response", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    public void setCertificatePath (@WebParam(name="KeyHandle", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                    int key_handle,
                                    @WebParam(name="X509Certificate", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                    List<byte[]> certificate_path,
                                    @WebParam(name="MAC", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                    byte[] mac)
    throws SKSException
      {
        log ("setCertificatePath (KeyHandle=" + key_handle + ")");
        try
          {
            sks.setCertificatePath (key_handle,
                                    CertificateUtil.getSortedPathFromBlobs (certificate_path),
                                    mac);
          }
        catch (IOException e)
          {
            throw new SKSException (e);
          }
      }

    @WebMethod(operationName="setSymmetricKey")
    @RequestWrapper(localName="setSymmetricKey", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @ResponseWrapper(localName="setSymmetricKey.Response", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    public void setSymmetricKey (@WebParam(name="KeyHandle", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                 int key_handle,
                                 @WebParam(name="SymmetricKey", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                 byte[] symmetric_key,
                                 @WebParam(name="MAC", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                 byte[] mac)
    throws SKSException
      {
        log ("setSymmetricKey (KeyHandle=" + key_handle + ")");
        sks.setSymmetricKey (key_handle, symmetric_key, mac);
      }

    @WebMethod(operationName="addExtension")
    @RequestWrapper(localName="addExtension", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @ResponseWrapper(localName="addExtension.Response", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    public void addExtension (@WebParam(name="KeyHandle", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                              int key_handle,
                              @WebParam(name="Type", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                              String type,
                              @WebParam(name="SubType", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                              byte sub_type,
                              @WebParam(name="Qualifier", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                              byte[] qualifier,
                              @WebParam(name="ExtensionData", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                              byte[] extension_data,
                              @WebParam(name="MAC", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                              byte[] mac)
    throws SKSException
      {
        log ("addExtension (KeyHandle=" + key_handle + ")");
        sks.addExtension (key_handle,
                          type,
                          sub_type,
                          qualifier,
                          extension_data,
                          mac);
      }

    @WebMethod(operationName="restorePrivateKey")
    @RequestWrapper(localName="restorePrivateKey", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @ResponseWrapper(localName="restorePrivateKey.Response", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    public void restorePrivateKey (@WebParam(name="KeyHandle", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                   int key_handle,
                                   @WebParam(name="PrivateKey", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                   byte[] private_key,
                                   @WebParam(name="MAC", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                   byte[] mac)
    throws SKSException
      {
        log ("restorePrivateKey (KeyHandle=" + key_handle + ")");
        sks.restorePrivateKey (key_handle, private_key, mac);
      }

    @WebMethod(operationName="pp_deleteKey")
    @RequestWrapper(localName="pp_deleteKey", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @ResponseWrapper(localName="pp_deleteKey.Response", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    public void pp_deleteKey (@WebParam(name="ProvisioningHandle", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                              int provisioning_handle,
                              @WebParam(name="TargetKeyHandle", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                              int target_key_handle,
                              @WebParam(name="Authorization", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                              byte[] authorization,
                              @WebParam(name="MAC", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                              byte[] mac)
    throws SKSException
      {
        log ("pp_deleteKey (ProvisioningHandle=" + provisioning_handle + ", TargetKeyHandle=" + target_key_handle + ")");
        sks.pp_deleteKey (provisioning_handle, target_key_handle, authorization, mac);
      }

    @WebMethod(operationName="pp_unlockKey")
    @RequestWrapper(localName="pp_unlockKey", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @ResponseWrapper(localName="pp_unlockKey.Response", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    public void pp_unlockKey (@WebParam(name="ProvisioningHandle", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                              int provisioning_handle,
                              @WebParam(name="TargetKeyHandle", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                              int target_key_handle,
                              @WebParam(name="Authorization", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                              byte[] authorization,
                              @WebParam(name="MAC", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                              byte[] mac)
    throws SKSException
      {
        log ("pp_unlockKey (ProvisioningHandle=" + provisioning_handle + ", TargetKeyHandle=" + target_key_handle + ")");
        sks.pp_unlockKey (provisioning_handle, target_key_handle, authorization, mac);
      }

    @WebMethod(operationName="pp_updateKey")
    @RequestWrapper(localName="pp_updateKey", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @ResponseWrapper(localName="pp_updateKey.Response", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    public void pp_updateKey (@WebParam(name="KeyHandle", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                              int key_handle,
                              @WebParam(name="TargetKeyHandle", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                              int target_key_handle,
                              @WebParam(name="Authorization", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                              byte[] authorization,
                              @WebParam(name="MAC", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                              byte[] mac)
    throws SKSException
      {
        log ("pp_updateKey (KeyHandle=" + key_handle + ", TargetKeyHandle=" + target_key_handle + ")");
        sks.pp_updateKey (key_handle, target_key_handle, authorization, mac);
      }

    @WebMethod(operationName="pp_cloneKeyProtection")
    @RequestWrapper(localName="pp_cloneKeyProtection", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @ResponseWrapper(localName="pp_cloneKeyProtection.Response", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    public void pp_cloneKeyProtection (@WebParam(name="KeyHandle", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                       int key_handle,
                                       @WebParam(name="TargetKeyHandle", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                       int target_key_handle,
                                       @WebParam(name="Authorization", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                       byte[] authorization,
                                       @WebParam(name="MAC", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                       byte[] mac)
    throws SKSException
      {
        log ("pp_cloneKeyProtection (KeyHandle=" + key_handle + ", TargetKeyHandle=" + target_key_handle + ")");
        sks.pp_cloneKeyProtection (key_handle, target_key_handle, authorization, mac);
      }

    @WebMethod(operationName="enumerateKeys")
    @RequestWrapper(localName="enumerateKeys", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @ResponseWrapper(localName="enumerateKeys.Response", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @WebResult(name="KeyHandle", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    public int enumerateKeys (@WebParam(name="KeyHandle", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                              int key_handle,
                              @WebParam(name="ProvisioningHandle", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                              Holder<Integer> provisioning_handle)
    throws SKSException
      {
        EnumeratedKey ek = sks.enumerateKeys (key_handle);
        if (ek == null)
          {
            ek = new EnumeratedKey ();  // Back to square #1
          }
        else
          {
            provisioning_handle.value = ek.getProvisioningHandle ();
          }
        log ("enumerateKeys (KeyHandle=" + key_handle + ") : KeyHandle=" + ek.getKeyHandle ());
        return ek.getKeyHandle ();
      }

    @WebMethod(operationName="getKeyAttributes")
    @RequestWrapper(localName="getKeyAttributes", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @ResponseWrapper(localName="getKeyAttributes.Response", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    public void getKeyAttributes (@WebParam(name="KeyHandle", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                  int key_handle,
                                  @WebParam(name="IsSymmetricKey", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                                  Holder<Boolean> is_symmetric_key,
                                  @WebParam(name="AppUsage", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                                  Holder<Byte> app_usage,
                                  @WebParam(name="FriendlyName", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                                  Holder<String> friendly_name,
                                  @WebParam(name="X509Certificate", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                                  Holder<List<byte[]>> certificate_path,
                                  @WebParam(name="EndorsedAlgorithm", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                                  Holder<List<String>> endorsed_algorithms,
                                  @WebParam(name="ExtensionType", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                                  Holder<List<String>> extension_types)
    throws SKSException
      {
        log ("getKeyAttributes (KeyHandle=" + key_handle + ")");
        try
          {
            KeyAttributes ka = sks.getKeyAttributes (key_handle);
            is_symmetric_key.value = ka.isSymmetricKey ();
            app_usage.value = ka.getAppUsage ().getSKSValue ();
            friendly_name.value = ka.getFriendlyName ();
            certificate_path.value = new ArrayList<byte[]> ();
            for (X509Certificate cert : ka.getCertificatePath ())
              {
                certificate_path.value.add (cert.getEncoded ());
              }
            endorsed_algorithms.value = new ArrayList<String> ();
            for (String alg :   ka.getEndorsedAlgorithms ())
              {
                endorsed_algorithms.value.add (alg);
              }
            extension_types.value = new ArrayList<String> ();
            for (String type :  ka.getExtensionTypes ())
              {
                extension_types.value.add (type);
              }
          }
        catch (GeneralSecurityException e)
          {
            throw new SKSException (e);
          }
       }

    @WebMethod(operationName="getKeyProtectionInfo")
    @RequestWrapper(localName="getKeyProtectionInfo", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @ResponseWrapper(localName="getKeyProtectionInfo.Response", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    public void getKeyProtectionInfo (@WebParam(name="KeyHandle", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                      int key_handle,
                                      @WebParam(name="ProtectionStatus", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                                      Holder<Byte> protection_status,
                                      @WebParam(name="PUKFormat", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                                      Holder<Byte> puk_format,
                                      @WebParam(name="PUKRetryLimit", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                                      Holder<Short> puk_retry_limit,
                                      @WebParam(name="PUKErrorCount", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                                      Holder<Short> puk_error_count,
                                      @WebParam(name="UserDefined", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                                      Holder<Boolean> user_defined,
                                      @WebParam(name="UserModifiable", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                                      Holder<Boolean> user_modifiable,
                                      @WebParam(name="Format", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                                      Holder<Byte> format,
                                      @WebParam(name="RetryLimit", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                                      Holder<Short> retry_limit,
                                      @WebParam(name="Grouping", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                                      Holder<Byte> grouping,
                                      @WebParam(name="PatternRestrictions", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                                      Holder<Byte> pattern_restrictions,
                                      @WebParam(name="MinLength", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                                      Holder<Short> min_length,
                                      @WebParam(name="MaxLength", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                                      Holder<Short> max_length,
                                      @WebParam(name="InputMethod", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                                      Holder<Byte> input_method,
                                      @WebParam(name="PINErrorCount", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                                      Holder<Short> pin_error_count,
                                      @WebParam(name="EnablePINCaching", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                                      Holder<Boolean> enable_pin_caching,
                                      @WebParam(name="BiometricProtection", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                                      Holder<Byte> biometric_protection,
                                      @WebParam(name="ExportProtection", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                                      Holder<Byte> export_protection,
                                      @WebParam(name="DeleteProtection", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                                      Holder<Byte> delete_protection,
                                      @WebParam(name="PrivateKeyBackup", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                                      Holder<Boolean> private_key_backup)
    throws SKSException
      {
        log ("getKeyProtectionInfo (KeyHandle=" + key_handle + ")");
        KeyProtectionInfo kpi      = sks.getKeyProtectionInfo (key_handle);
        protection_status.value    = kpi.getSKSProtectionStatus ();
        if (kpi.hasLocalPUKProtection ())
          {
            puk_format.value           = kpi.getPUKFormat ().getSKSValue ();
            puk_retry_limit.value      = kpi.getPUKRetryLimit ();
            puk_error_count.value      = kpi.getPUKErrorCount ();
          }
        if (kpi.hasLocalPINProtection ())
          {
            user_defined.value         = kpi.getPINUserDefinedFlag ();
            user_modifiable.value      = kpi.getPINUserModifiableFlag ();
            format.value               = kpi.getPINFormat ().getSKSValue ();
            retry_limit.value          = kpi.getPINRetryLimit ();
            grouping.value             = kpi.getPINGrouping ().getSKSValue ();
            pattern_restrictions.value = PatternRestriction.getSKSValue (kpi.getPINPatternRestrictions ());
            min_length.value           = kpi.getPINMinLength ();
            max_length.value           = kpi.getPINMaxLength ();
            input_method.value         = kpi.getPINInputMethod ().getSKSValue ();
            pin_error_count.value      = kpi.getPINErrorCount ();
          }
        enable_pin_caching.value   = kpi.getEnablePINCachingFlag ();
        biometric_protection.value = kpi.getBiometricProtection ().getSKSValue ();
        export_protection.value    = kpi.getExportProtection ().getSKSValue ();
        delete_protection.value    = kpi.getDeleteProtection ().getSKSValue ();
        private_key_backup.value   = kpi.getPrivateKeyBackupFlag ();
      }

    @WebMethod(operationName="getExtension")
    @RequestWrapper(localName="getExtension", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @ResponseWrapper(localName="getExtension.Response", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    public void getExtension (@WebParam(name="KeyHandle", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                              int key_handle,
                              @WebParam(name="Type", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                              String type,
                              @WebParam(name="SubType", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                              Holder<Byte> sub_type,
                              @WebParam(name="Qualifier", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                              Holder<byte[]> qualifier,
                              @WebParam(name="ExtensionData", targetNamespace="http://xmlns.webpki.org/sks/v1.00", mode=WebParam.Mode.OUT)
                              Holder<byte[]> extension_data)
    throws SKSException
      {
        log ("getExtension (KeyHandle=" + key_handle + ", Type=" + type + ")");
        Extension ext = sks.getExtension (key_handle, type);
        sub_type.value       = ext.getSubType ();
        qualifier.value      = ext.getQualifier ();
        extension_data.value = ext.getExtensionData ();
      }

    @WebMethod(operationName="setProperty")
    @RequestWrapper(localName="setProperty", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @ResponseWrapper(localName="setProperty.Response", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    public void setProperty (@WebParam(name="KeyHandle", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                             int key_handle,
                             @WebParam(name="Type", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                             String type,
                             @WebParam(name="Name", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                             byte[] name,
                             @WebParam(name="Value", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                             byte[] value)
    throws SKSException
      {
        log ("setProperty (KeyHandle=" + key_handle + ", Type=" + type + ")");
        sks.setProperty (key_handle, type, name, value);
      }

    @WebMethod(operationName="deleteKey")
    @RequestWrapper(localName="deleteKey", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @ResponseWrapper(localName="deleteKey.Response", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    public void deleteKey (@WebParam(name="KeyHandle", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                           int key_handle,
                           @WebParam(name="Authorization", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                           byte[] authorization)
    throws SKSException
      {
        log ("deleteKey (KeyHandle=" + key_handle + ")");
        sks.deleteKey (key_handle, authorization);
      }

    @WebMethod(operationName="exportKey")
    @RequestWrapper(localName="exportKey", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @ResponseWrapper(localName="exportKey.Response", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @WebResult(name="Key", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    public byte[] exportKey (@WebParam(name="KeyHandle", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                             int key_handle,
                             @WebParam(name="Authorization", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                             byte[] authorization)
    throws SKSException
      {
        log ("exportKey (KeyHandle=" + key_handle + ")");
        return sks.exportKey (key_handle, authorization);
      }

    @WebMethod(operationName="unlockKey")
    @RequestWrapper(localName="unlockKey", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @ResponseWrapper(localName="unlockKey.Response", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    public void unlockKey (@WebParam(name="KeyHandle", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                           int key_handle,
                           @WebParam(name="Authorization", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                           byte[] authorization)
    throws SKSException
      {
        log ("unlockKey (KeyHandle=" + key_handle + ")");
        sks.unlockKey (key_handle, authorization);
      }

    @WebMethod(operationName="changePIN")
    @RequestWrapper(localName="changePIN", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @ResponseWrapper(localName="changePIN.Response", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    public void changePIN (@WebParam(name="KeyHandle", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                           int key_handle,
                           @WebParam(name="Authorization", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                           byte[] authorization,
                           @WebParam(name="NewPIN", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                           byte[] new_pin)
    throws SKSException
      {
        log ("changePIN (KeyHandle=" + key_handle + ")");
        sks.changePIN (key_handle, authorization, new_pin);
      }

    @WebMethod(operationName="setPIN")
    @RequestWrapper(localName="setPIN", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @ResponseWrapper(localName="setPIN.Response", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    public void setPIN (@WebParam(name="KeyHandle", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                        int key_handle,
                        @WebParam(name="Authorization", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                        byte[] authorization,
                        @WebParam(name="NewPIN", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                        byte[] new_pin)
    throws SKSException
      {
        log ("setPIN (KeyHandle=" + key_handle + ")");
        sks.setPIN (key_handle, authorization, new_pin);
      }

    @WebMethod(operationName="signHashedData")
    @RequestWrapper(localName="signHashedData", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @ResponseWrapper(localName="signHashedData.Response", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @WebResult(name="Result", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    public byte[] signHashedData (@WebParam(name="KeyHandle", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                  int key_handle,
                                  @WebParam(name="Algorithm", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                  String algorithm,
                                  @WebParam(name="Parameters", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                  byte[] parameters,
                                  @WebParam(name="Authorization", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                  byte[] authorization,
                                  @WebParam(name="Data", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                  byte[] data)
    throws SKSException
      {
        log ("signHashedData (KeyHandle=" + key_handle + ")");
        return sks.signHashedData (key_handle,
                                   algorithm,
                                   parameters,
                                   authorization,
                                   data);
      }

    @WebMethod(operationName="asymmetricKeyDecrypt")
    @RequestWrapper(localName="asymmetricKeyDecrypt", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @ResponseWrapper(localName="asymmetricKeyDecrypt.Response", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @WebResult(name="Result", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    public byte[] asymmetricKeyDecrypt (@WebParam(name="KeyHandle", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                        int key_handle,
                                        @WebParam(name="Algorithm", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                        String algorithm,
                                        @WebParam(name="Parameters", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                        byte[] parameters,
                                        @WebParam(name="Authorization", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                        byte[] authorization,
                                        @WebParam(name="Data", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                        byte[] data)
    throws SKSException
      {
        log ("asymmetricKeyDecrypt (KeyHandle=" + key_handle + ")");
        return sks.asymmetricKeyDecrypt (key_handle, 
                                         algorithm,
                                         parameters,
                                         authorization, 
                                         data);
      }

    @WebMethod(operationName="keyAgreement")
    @RequestWrapper(localName="keyAgreement", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @ResponseWrapper(localName="keyAgreement.Response", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @WebResult(name="Key", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    public byte[] keyAgreement (@WebParam(name="KeyHandle", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                int key_handle,
                                @WebParam(name="Algorithm", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                String algorithm,
                                @WebParam(name="Parameters", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                byte[] parameters,
                                @WebParam(name="Authorization", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                byte[] authorization,
                                @WebParam(name="PublicKey", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                byte[] public_key)
    throws SKSException
      {
        log ("keyAgreement (KeyHandle=" + key_handle + ")");
        return sks.keyAgreement (key_handle, 
                                 algorithm, 
                                 parameters, 
                                 authorization, 
                                 createPublicKeyFromBlob (public_key));
      }

    @WebMethod(operationName="performHMAC")
    @RequestWrapper(localName="performHMAC", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @ResponseWrapper(localName="performHMAC.Response", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @WebResult(name="Result", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    public byte[] performHMAC (@WebParam(name="KeyHandle", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                               int key_handle,
                               @WebParam(name="Algorithm", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                               String algorithm,
                               @WebParam(name="Authorization", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                               byte[] authorization,
                               @WebParam(name="Data", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                               byte[] data)
    throws SKSException
      {
        log ("performHMAC (KeyHandle=" + key_handle + ")");
        return sks.performHMAC (key_handle, 
                                algorithm,
                                authorization,
                                data);
      }

    @WebMethod(operationName="symmetricKeyEncrypt")
    @RequestWrapper(localName="symmetricKeyEncrypt", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @ResponseWrapper(localName="symmetricKeyEncrypt.Response", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @WebResult(name="Result", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    public byte[] symmetricKeyEncrypt (@WebParam(name="KeyHandle", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                       int key_handle,
                                       @WebParam(name="Algorithm", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                       String algorithm,
                                       @WebParam(name="Mode", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                       boolean mode,
                                       @WebParam(name="IV", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                       byte[] iv,
                                       @WebParam(name="Authorization", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                       byte[] authorization,
                                       @WebParam(name="Data", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
                                       byte[] data)
    throws SKSException
      {
        log ("symmetricKeyEncrypt (KeyHandle=" + key_handle + ")");
        return sks.symmetricKeyEncrypt (key_handle, algorithm, mode, iv, authorization, data);
      }

    @WebMethod(operationName="getVersion")
    @RequestWrapper(localName="getVersion", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @ResponseWrapper(localName="getVersion.Response", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    @WebResult(name="return", targetNamespace="http://xmlns.webpki.org/sks/v1.00")
    public String getVersion ()
      {
        return "0.00001";
      }

    public static void main (String[] args)
      {
        if (args.length != 1)
          {
            System.out.println ("Missing URL");
          }
        Endpoint endpoint = Endpoint.create (new SKSWSImplementation ());
        endpoint.publish (args[0]);
      }
  }
