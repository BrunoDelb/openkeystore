<?xml version="1.0" encoding="UTF-8"?>
<!-- SKS WS Descriptor File to be used with "WSCreator" -->
<WebService NameSpace="http://xmlns.webpki.org/sks/v1.00"
            Service="SKSWS"
            DefaultURL="http://localhost:9982/securekeystore"
            WSDLLocation="META-INF/SKSWS.wsdl"
            Qualified="true"
            xmlns="http://xmlns.webpki.org/wscreator.1.00">

   <LicenseHeader><![CDATA[
  Copyright 2006-2011 WebPKI.org (http://webpki.org).

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

]]></LicenseHeader>

   <GlobalClientConstants>
      <Constant Name="ALGORITHM_SESSION_KEY_ATTEST_1" Type="string" Value="http://xmlns.webpki.org/keygen2/1.0#algorithm.sks.s1"/>
      <Constant Name="ALGORITHM_KEY_ATTEST_1"         Type="string" Value="http://xmlns.webpki.org/keygen2/1.0#algorithm.sks.k1"/>
   </GlobalClientConstants>

   <JavaServer ClassName="org.webpki.sks.ws.server.SKSWSImplementation"
               Imports="java.util.ArrayList
                        java.security.GeneralSecurityException
                        java.security.Security
                        java.security.spec.X509EncodedKeySpec
                        java.security.KeyFactory
                        java.security.PublicKey
                        java.security.cert.X509Certificate
                        java.security.interfaces.ECPublicKey
                        java.io.IOException
                        org.bouncycastle.jce.provider.BouncyCastleProvider
                        org.webpki.crypto.CertificateUtil
                        org.webpki.sks.ws.TrustedGUIAuthorization
                        org.webpki.sks.EnumeratedKey
                        org.webpki.sks.ProvisioningSession
                        org.webpki.sks.EnumeratedProvisioningSession
                        org.webpki.sks.DeviceInfo
                        org.webpki.sks.KeyAttributes
                        org.webpki.sks.InputMethod
                        org.webpki.sks.PatternRestriction
                        org.webpki.sks.KeyProtectionInfo
                        org.webpki.sks.KeyData
                        org.webpki.sks.Extension
                        org.webpki.sks.SecureKeyStore">
     <ClassHeader><![CDATA[/**
 * SKS Web Service Implementation.
 *
 * The purpose of the Web Service is creating a "singleton"
 * service that can concurrently be called by arbitrary
 * SKS-using applications.  The Web Service can be connected
 * to any conformant SKS implementation.
 */ 
]]></ClassHeader>
     <SupportCode><![CDATA[
    static SecureKeyStore sks;
    
    static TrustedGUIAuthorization tga;
    
    static DeviceInfo device_info;
    
    static
      {
        try
          {
            Security.insertProviderAt (new BouncyCastleProvider(), 1);
            sks = (SecureKeyStore) Class.forName (System.getProperty ("sks.implementation")).newInstance ();
            tga = (TrustedGUIAuthorization) Class.forName (System.getProperty ("sks.auth.gui")).newInstance ();
            device_info = sks.getDeviceInfo ();
            System.out.println ("Device: " + device_info.getVendorDescription ());
            System.out.println ("Vendor: " + device_info.getVendorName ());
            System.out.println ("API Version: " + device_info.getAPILevel ());
            System.out.println ("Trusted GUI: " + tga.getImplementation ());
          }
        catch (ClassNotFoundException e)
          {
            throw new RuntimeException (e);
          }
        catch (InstantiationException e)
          {
            throw new RuntimeException (e);
          }
        catch (IllegalAccessException e)
          {
            throw new RuntimeException (e);
          }
        catch (SKSException e)
          {
            throw new RuntimeException (e);
          }
      }
    
    void log (String message)
      {
        System.out.println (message);
      }

    PublicKey createPublicKeyFromBlob (byte[] blob) throws SKSException
      {
        X509EncodedKeySpec ks = new X509EncodedKeySpec (blob);
        KeyFactory kf = null;
        try
          {
            kf = KeyFactory.getInstance ("RSA");
            return kf.generatePublic(ks);
          }
        catch (GeneralSecurityException e1)
          {
            try
              {
                kf = KeyFactory.getInstance ("EC");
                return kf.generatePublic(ks);
              }
            catch (GeneralSecurityException e2)
              {
                throw new SKSException (e2);
              }
          }
      }

    ECPublicKey getECPublicKey (byte[] blob) throws SKSException
      {
        PublicKey public_key = createPublicKeyFromBlob (blob);
        if (public_key instanceof ECPublicKey)
          {
            return (ECPublicKey) public_key;
          }
        throw new SKSException ("Expected EC key");
      }

    byte[] checkAuthorization (boolean trusted_gui_authorization,
                               int key_handle,
                               byte[] authorization) throws SKSException
      {
        KeyProtectionInfo kpi = sks.getKeyProtectionInfo (key_handle);
        if (kpi.hasLocalPINProtection ())
          {
            if (kpi.getPINInputMethod () == InputMethod.TRUSTED_GUI && !trusted_gui_authorization)
              {
                throw new SKSException ("Missing required \"TrustedGUIAuthorization\" for key #" + key_handle);
              }
            if (trusted_gui_authorization)
              {
                log ("Restore authorization for KeyHandle=" + key_handle);
                authorization = tga.restoreTrustedAuthorization (authorization);
              }
          }
        return authorization;
      }
]]></SupportCode>
   </JavaServer>

   <JavaClient ClassName="org.webpki.sks.ws.client.SKSWSProxy">
     <ClassHeader><![CDATA[/**
 * This is the Java SKS WS client.
 */
]]></ClassHeader>
   </JavaClient>
   <DotNetClient ClassName="org.webpki.sks.ws.client.SKSWSProxy"
                 RegistryURL="SOFTWARE\WebPKI.org\SKSWSURL"
                 PathAsDirectory="false"
                 Partial="true">
     <ClassHeader><![CDATA[    /*
     *  This is the .NET SKS WS client.
     */
]]></ClassHeader>
     <RewriteRule Name="Out.X509"
                  ActualType="System.Security.Cryptography.X509Certificates.X509Certificate2"
                  Conversion="Conversions.BinaryListToCertificates($)"/>
     <RewriteRule Name="In.X509"
                  ActualType="System.Security.Cryptography.X509Certificates.X509Certificate2"
                  Conversion="Conversions.CertificatesToBinaryList($)"/>
     <RewriteRule Name="In.PublicKey"
                  ActualType="System.Security.Cryptography.X509Certificates.PublicKey"
                  Conversion="Conversions.EncodeX509PublicKey($)"/>
     <RewriteRule Name="Out.PublicKey"
                  ActualType="System.Security.Cryptography.X509Certificates.PublicKey"
                  Conversion="Conversions.DecodeX509PublicKey($)"/>
     <RewriteRule Name="In.ECPublicKey"
                  ActualType="System.Security.Cryptography.X509Certificates.PublicKey"
                  Conversion="Conversions.EncodeX509ECPublicKey($)"/>
     <RewriteRule Name="Out.ECPublicKey"
                  ActualType="System.Security.Cryptography.X509Certificates.PublicKey"
                  Conversion="Conversions.DecodeX509ECPublicKey($)"/>
     <RewriteRule Name="In.StringArray"
                  ActualType="string"
                  Conversion="new List&lt;string&gt;($)"/>
     <RewriteRule Name="Out.StringArray"
                  ActualType="string"
                  Conversion="$.ToArray()"/>
     <RewriteRule Name="Out.ShortArray"
                  ActualType="short"
                  Conversion="$.ToArray()"/>
     <RewriteRule Name="In.PassphraseFormat"
                  ActualType="PassphraseFormat"
                  Conversion="(sbyte)$"/>
     <RewriteRule Name="Out.PassphraseFormat"
                  ActualType="PassphraseFormat"
                  Conversion="(PassphraseFormat)$"/>
     <RewriteRule Name="In.InputMethod"
                  ActualType="InputMethod"
                  Conversion="(sbyte)$"/>
     <RewriteRule Name="Out.InputMethod"
                  ActualType="InputMethod"
                  Conversion="(InputMethod)$"/>
     <RewriteRule Name="In.Grouping"
                  ActualType="Grouping"
                  Conversion="(sbyte)$"/>
     <RewriteRule Name="Out.Grouping"
                  ActualType="Grouping"
                  Conversion="(Grouping)$"/>
     <RewriteRule Name="In.PatternRestrictions"
                  ActualType="HashSet&lt;PatternRestriction&gt;"
                  Conversion="Conversions.PatternRestrictionsToSKS($)"/>
     <RewriteRule Name="Out.PatternRestrictions"
                  ActualType="HashSet&lt;PatternRestriction&gt;"
                  Conversion="Conversions.SKSToPatternRestrictions($)"/>
     <SuppressRule Name="TGA">tga</SuppressRule>
     <EmbedRule Name="TGA">
        <Before>            do
            {
                bool tga = GetTrustedGUIAuthorization(KeyHandle, ref Authorization);
                try
                {
</Before>
        <After><![CDATA[                }
                catch (System.ServiceModel.FaultException<_SKSException> e)
                {
                    if (!tga || (e.Detail.error != SKSException.ERROR_AUTHORIZATION))
                    {
                        throw new SKSException(e);
                    }
                    Authorization = null;
                }
            }
            while (true);
]]></After>
     </EmbedRule>
   </DotNetClient>

   <CppClient ClassName="SKSWSProxy"/>

   <Exception ClassName="org.webpki.sks.SKSException">
     <Property Name="message"             Type="string"/>
     <Property Name="error"               Type="int"/>
     <Constant Name="ERROR_AUTHORIZATION" Type="int" Value="0x01"/>
     <Constant Name="ERROR_NOT_ALLOWED"   Type="int" Value="0x02"/>
     <Constant Name="ERROR_STORAGE"       Type="int" Value="0x03"/>
     <Constant Name="ERROR_MAC"           Type="int" Value="0x04"/>
     <Constant Name="ERROR_CRYPTO"        Type="int" Value="0x05"/>
     <Constant Name="ERROR_NO_SESSION"    Type="int" Value="0x06"/>
     <Constant Name="ERROR_NO_KEY"        Type="int" Value="0x07"/>
     <Constant Name="ERROR_ALGORITHM"     Type="int" Value="0x08"/>
     <Constant Name="ERROR_OPTION"        Type="int" Value="0x09"/>
     <Constant Name="ERROR_INTERNAL"      Type="int" Value="0x0A"/>
     <Constant Name="ERROR_EXTERNAL"      Type="int" Value="0x0B"/>
     <Constant Name="ERROR_USER_ABORT"    Type="int" Value="0x0C"/>
   </Exception>

   <ReturnClass ClassName="org.webpki.sks.DeviceInfo"/>

   <ReturnClass ClassName="org.webpki.sks.ProvisioningSession"/>

   <ReturnClass ClassName="org.webpki.sks.KeyData"/>

   <ReturnClass ClassName="org.webpki.sks.Extension"/>
   
   <ReturnClass ClassName="org.webpki.sks.EnumeratedKey" NullValue="0"/>
   
   <ReturnClass ClassName="org.webpki.sks.EnumeratedProvisioningSession" NullValue="0"/>
   
   <ReturnClass ClassName="org.webpki.sks.KeyAttributes"/>
   
   <ReturnClass ClassName="org.webpki.sks.KeyProtectionInfo">
     <Constant Name="PROTSTAT_PIN_PROTECTED" Type="byte" Value="0x01"/>
     <Constant Name="PROTSTAT_PUK_PROTECTED" Type="byte" Value="0x02"/>
     <Constant Name="PROTSTAT_PIN_BLOCKED"   Type="byte" Value="0x04"/>
     <Constant Name="PROTSTAT_PUK_BLOCKED"   Type="byte" Value="0x08"/>
     <Constant Name="PROTSTAT_DEVICE_PIN"    Type="byte" Value="0x10"/>
   </ReturnClass>
 
   <Method Name="getDeviceInfo" ReturnClass="DeviceInfo" Throws="SKSException">
     <Parameter Name="api_level"            Type="short"  XMLName="APILevel"           Mode="out"/>
     <Parameter Name="update_url"           Type="string" XMLName="UpdateURL"          Mode="out" Null="true"/>
     <Parameter Name="vendor_name"          Type="string" XMLName="VendorName"         Mode="out"/>
     <Parameter Name="vendor_description"   Type="string" XMLName="VendorDescription"  Mode="out"/>
     <Parameter Name="certificate_path"     Type="binary" XMLName="X509Certificate"    Mode="out" List="true" RewriteRule="Out.X509"/>
     <Parameter Name="supported_algorithms" Type="string" XMLName="SupportedAlgorithm" Mode="out" List="true" RewriteRule="Out.StringArray"/>
     <Parameter Name="rsa_exponent_support" Type="bool"   XMLName="RSAExponentSupport" Mode="out"/>
     <Parameter Name="rsa_key_sizes"        Type="short"  XMLName="RSAKeySize"         Mode="out" List="true" RewriteRule="Out.ShortArray"/>
     <Parameter Name="crypto_data_size"     Type="int"    XMLName="CryptoDataSize"     Mode="out"/>
     <Parameter Name="extension_data_size"  Type="int"    XMLName="ExtensionDataSize"  Mode="out"/>
     <Parameter Name="device_pin_support"   Type="bool"   XMLName="DevicePINSupport"   Mode="out"/>
     <Parameter Name="biometric_support"    Type="bool"   XMLName="BiometricSupport"   Mode="out"/>
     <Code><![CDATA[
        log ("getDeviceInfo ()");
        try
          {
            DeviceInfo device_info = sks.getDeviceInfo ();
            api_level.value = device_info.getAPILevel ();
            update_url.value = device_info.getUpdateURL ();
            vendor_name.value = device_info.getVendorName ();
            vendor_description.value = device_info.getVendorDescription ();
            certificate_path.value = new ArrayList<byte[]> ();
            for (X509Certificate cert : device_info.getCertificatePath ())
              {
                certificate_path.value.add (cert.getEncoded ());
              }
            supported_algorithms.value = new ArrayList<String> ();
            for (String alg : device_info.getSupportedAlgorithms ())
              {
                supported_algorithms.value.add (alg);
              }
            rsa_exponent_support.value = device_info.getRSAExponentSupport ();
            rsa_key_sizes.value = new ArrayList<Short> ();
            for (short size : device_info.getRSAKeySizes ())
              {
                rsa_key_sizes.value.add (size);
              }
            crypto_data_size.value = device_info.getCryptoDataSize ();
            extension_data_size.value = device_info.getExtensionDataSize ();
            device_pin_support.value = device_info.getDevicePINSupport ();
            biometric_support.value = device_info.getBiometricSupport ();
          }
        catch (GeneralSecurityException e)
          {
            throw new SKSException (e);
          }
]]></Code></Method>

   <Method Name="createProvisioningSession" ReturnClass="ProvisioningSession" Throws="SKSException">
     <Returns   Name="provisioning_handle"  Type="int"    XMLName="ProvisioningHandle"/>
     <Parameter Name="algorithm"            Type="string" XMLName="Algorithm"/>
     <Parameter Name="privacy_enabled"      Type="bool"   XMLName="PrivacyEnabled"/>
     <Parameter Name="server_session_id"    Type="string" XMLName="ServerSessionID"/>
     <Parameter Name="server_ephemeral_key" Type="binary" XMLName="ServerEphemeralKey"             RewriteRule="In.ECPublicKey"/>
     <Parameter Name="issuer_uri"           Type="string" XMLName="IssuerURI"/>
     <Parameter Name="key_management_key"   Type="binary" XMLName="KeyManagementKey"   Null="true" RewriteRule="In.PublicKey"/>
     <Parameter Name="client_time"          Type="int"    XMLName="ClientTime"/>
     <Parameter Name="session_life_time"    Type="int"    XMLName="SessionLifeTime"/>
     <Parameter Name="session_key_limit"    Type="short"  XMLName="SessionKeyLimit"/>
     <Parameter Name="client_session_id"    Type="string" XMLName="ClientSessionID"    Mode="out"/>
     <Parameter Name="client_ephemeral_key" Type="binary" XMLName="ClientEphemeralKey" Mode="out" RewriteRule="Out.ECPublicKey"/>
     <Parameter Name="attestation"          Type="binary" XMLName="Attestation"        Mode="out"/>
     <Code><![CDATA[
/*
        System.out.println ("SERV=" + (server_ephemeral_key == null ? "NULL" : server_ephemeral_key.length) + " KMK=" + (key_management_key == null ? "NULL" : key_management_key.length));
        try
          {
        org.webpki.asn1.BaseASN1Object o = org.webpki.asn1.DerDecoder.decode(server_ephemeral_key, 0);
        System.out.println(o.toString (true, true));
          }
        catch (IOException e)
          {
            System.out.println ("ASN1" + e.getMessage ());
          }
*/
        ProvisioningSession sess = sks.createProvisioningSession (algorithm,
                                                                  privacy_enabled,
                                                                  server_session_id,
                                                                  getECPublicKey (server_ephemeral_key),
                                                                  issuer_uri,
                                                                  key_management_key == null ? null : createPublicKeyFromBlob (key_management_key),
                                                                  client_time,
                                                                  session_life_time,
                                                                  session_key_limit);
        client_session_id.value = sess.getClientSessionID ();
        client_ephemeral_key.value = sess.getClientEphemeralKey ().getEncoded ();
        attestation.value = sess.getAttestation ();
        log ("createProvisioningSession () : ProvisioningHandle=" + sess.getProvisioningHandle ());
        return sess.getProvisioningHandle ();
]]></Code></Method>

   <Method Name="closeProvisioningSession" Throws="SKSException">
     <Returns   Name="attestation"         Type="binary" XMLName="Attestation"/>
     <Parameter Name="provisioning_handle" Type="int"    XMLName="ProvisioningHandle"/>
     <Parameter Name="nonce"               Type="binary" XMLName="Nonce"/>
     <Parameter Name="mac"                 Type="binary" XMLName="MAC"/>
     <Code><![CDATA[
        log ("closeProvisioningSession (ProvisioningHandle=" + provisioning_handle + ")");
        return sks.closeProvisioningSession (provisioning_handle, nonce, mac);
]]></Code></Method>

   <Method Name="enumerateProvisioningSessions" ReturnClass="EnumeratedProvisioningSession" Throws="SKSException">
     <Returns   Name="provisioning_handle" Type="int"    XMLName="ProvisioningHandle"/>
     <Parameter Name="provisioning_handle" Type="int"    XMLName="ProvisioningHandle"/>
     <Parameter Name="provisioning_state"  Type="bool"   XMLName="ProvisioningState"/>
     <Parameter Name="algorithm"           Type="string" XMLName="Algorithm"          Mode="out" Null="true"/>
     <Parameter Name="privacy_enabled"     Type="bool"   XMLName="PrivacyEnabled"     Mode="out" Null="true"/>
     <Parameter Name="key_management_key"  Type="binary" XMLName="KeyManagementKey"   Mode="out" Null="true" RewriteRule="Out.PublicKey"/>
     <Parameter Name="client_time"         Type="int"    XMLName="ClientTime"         Mode="out" Null="true"/>
     <Parameter Name="session_life_time"   Type="int"    XMLName="SessionLifeTime"    Mode="out" Null="true"/>
     <Parameter Name="server_session_id"   Type="string" XMLName="ServerSessionID"    Mode="out" Null="true"/>
     <Parameter Name="client_session_id"   Type="string" XMLName="ClientSessionID"    Mode="out" Null="true"/>
     <Parameter Name="issuer_uri"          Type="string" XMLName="IssuerURI"          Mode="out" Null="true"/>
     <Code><![CDATA[
        EnumeratedProvisioningSession eps = sks.enumerateProvisioningSessions (provisioning_handle, provisioning_state);
        if (eps == null)
          {
            eps = new EnumeratedProvisioningSession ();  // Back to square #1
          }
        else
          {
            algorithm.value = eps.getAlgorithm ();
            privacy_enabled.value = eps.getPrivacyEnabled ();
            key_management_key.value = eps.getKeyManagementKey () == null ? null : eps.getKeyManagementKey ().getEncoded ();
            client_time.value = eps.getClientTime ();
            session_life_time.value = eps.getSessionLifeTime ();
            server_session_id.value = eps.getServerSessionID ();
            client_session_id.value = eps.getClientSessionID ();
            issuer_uri.value = eps.getIssuerURI ();
          }
        log ("enumerateProvisioningSessions (ProvisioningHandle=" + provisioning_handle + ") : ProvisioningHandle=" + eps.getProvisioningHandle ());
        return eps.getProvisioningHandle ();
]]></Code></Method>

   <Method Name="abortProvisioningSession" Throws="SKSException">
     <Parameter Name="provisioning_handle" XMLName="ProvisioningHandle" Type="int"/>
     <Code><![CDATA[
        log ("abortProvisioningSession (ProvisioningHandle=" + provisioning_handle + ")");
        sks.abortProvisioningSession (provisioning_handle);
]]></Code></Method>

   <Method Name="signProvisioningSessionData" Throws="SKSException">
     <Returns   Name="result"              Type="binary" XMLName="Result"/>
     <Parameter Name="provisioning_handle" Type="int"    XMLName="ProvisioningHandle"/>
     <Parameter Name="data"                Type="binary" XMLName="Data"               />
     <Code><![CDATA[
        log ("signProvisioningSessionData (ProvisioningHandle=" + provisioning_handle + ")");
        return sks.signProvisioningSessionData (provisioning_handle, data);
]]></Code></Method>

   <Method Name="createPUKPolicy" Throws="SKSException">
     <Returns   Name="puk_policy_handle"   Type="int"    XMLName="PUKPolicyHandle"/>
     <Parameter Name="provisioning_handle" Type="int"    XMLName="ProvisioningHandle"/>
     <Parameter Name="id"                  Type="string" XMLName="ID"/>
     <Parameter Name="puk_value"           Type="binary" XMLName="PUKValue"/>
     <Parameter Name="format"              Type="byte"   XMLName="Format"             RewriteRule="In.PassphraseFormat"/>
     <Parameter Name="retry_limit"         Type="short"  XMLName="RetryLimit"/>
     <Parameter Name="mac"                 Type="binary" XMLName="MAC"/>
     <Code><![CDATA[
        log ("createPUKPolicy (ID=" + id + ")");
        return sks.createPUKPolicy (provisioning_handle,
                                    id,
                                    puk_value,
                                    format,
                                    retry_limit,
                                    mac);
]]></Code></Method>

   <Method Name="createPINPolicy" Throws="SKSException">
     <Returns   Name="pin_policy_handle"    Type="int"    XMLName="PINPolicyHandle"/>
     <Parameter Name="provisioning_handle"  Type="int"    XMLName="ProvisioningHandle"/>
     <Parameter Name="id"                   Type="string" XMLName="ID"/>
     <Parameter Name="puk_policy_handle"    Type="int"    XMLName="PUKPolicyHandle"/>
     <Parameter Name="user_defined"         Type="bool"   XMLName="UserDefined"/>
     <Parameter Name="user_modifiable"      Type="bool"   XMLName="UserModifiable"/>
     <Parameter Name="format"               Type="byte"   XMLName="Format"              RewriteRule="In.PassphraseFormat"/>
     <Parameter Name="retry_limit"          Type="short"  XMLName="RetryLimit"/>
     <Parameter Name="grouping"             Type="byte"   XMLName="Grouping"            RewriteRule="In.Grouping"/>
     <Parameter Name="pattern_restrictions" Type="byte"   XMLName="PatternRestrictions" RewriteRule="In.PatternRestrictions"/>
     <Parameter Name="min_length"           Type="short"  XMLName="MinLength"/>
     <Parameter Name="max_length"           Type="short"  XMLName="MaxLength"/>
     <Parameter Name="input_method"         Type="byte"   XMLName="InputMethod"         RewriteRule="In.InputMethod"/>
     <Parameter Name="mac"                  Type="binary" XMLName="MAC"/>
     <Code><![CDATA[
        log ("createPINPolicy (ID=" + id + ")");
        return sks.createPINPolicy (provisioning_handle,
                                    id,
                                    puk_policy_handle,
                                    user_defined,
                                    user_modifiable,
                                    format,
                                    retry_limit,
                                    grouping,
                                    pattern_restrictions,
                                    min_length,
                                    max_length,
                                    input_method,
                                    mac);
]]></Code></Method>

   <Method Name="createKeyEntry" ReturnClass="KeyData" Throws="SKSException">
     <Returns   Name="key_handle"            Type="int"    XMLName="KeyHandle"/>
     <Parameter Name="provisioning_handle"   Type="int"    XMLName="ProvisioningHandle"/>
     <Parameter Name="id"                    Type="string" XMLName="ID"/>
     <Parameter Name="algorithm"             Type="string" XMLName="Algorithm"/>
     <Parameter Name="server_seed"           Type="binary" XMLName="ServerSeed"         Null="true"/>
     <Parameter Name="device_pin_protection" Type="bool"   XMLName="DevicePINProtection"/>
     <Parameter Name="pin_policy_handle"     Type="int"    XMLName="PINPolicyHandle"/>
     <Parameter Name="pin_value"             Type="binary" XMLName="PINValue"           Null="true"/>
     <Parameter Name="enable_pin_caching"    Type="bool"   XMLName="EnablePINCaching"/>
     <Parameter Name="biometric_protection"  Type="byte"   XMLName="BiometricProtection"/>
     <Parameter Name="export_protection"     Type="byte"   XMLName="ExportProtection"/>
     <Parameter Name="delete_protection"     Type="byte"   XMLName="DeleteProtection"/>
     <Parameter Name="app_usage"             Type="byte"   XMLName="AppUsage"/>
     <Parameter Name="friendly_name"         Type="string" XMLName="FriendlyName"       Null="true"/>
     <Parameter Name="key_specifier"         Type="binary" XMLName="KeySpecifier"/>
     <Parameter Name="endorsed_algorithms"   Type="string" XMLName="EndorsedAlgorithm"  Null="true" List="true" RewriteRule="In.StringArray"/>
     <Parameter Name="mac"                   Type="binary" XMLName="MAC"/>
     <Parameter Name="public_key"            Type="binary" XMLName="PublicKey"          Mode="out" RewriteRule="Out.PublicKey"/>
     <Parameter Name="attestation"           Type="binary" XMLName="Attestation"        Mode="out"/>
     <Code><![CDATA[
        KeyData kd = sks.createKeyEntry (provisioning_handle,
                                         id,
                                         algorithm,
                                         server_seed,
                                         device_pin_protection,
                                         pin_policy_handle,
                                         pin_value,
                                         enable_pin_caching,
                                         biometric_protection,
                                         export_protection,
                                         delete_protection,
                                         app_usage,
                                         friendly_name,
                                         key_specifier,
                                         endorsed_algorithms.toArray (new String[0]),
                                         mac);
        public_key.value = kd.getPublicKey ().getEncoded ();
        attestation.value = kd.getAttestation ();
        log ("createKeyEntry (ID=" + id + ") : KeyHandle=" + kd.getKeyHandle ());
        return kd.getKeyHandle ();
]]></Code></Method>

   <Method Name="getKeyHandle" Throws="SKSException">
     <Returns   Name="key_handle"          Type="int"    XMLName="KeyHandle"/>
     <Parameter Name="provisioning_handle" Type="int"    XMLName="ProvisioningHandle"/>
     <Parameter Name="id"                  Type="string" XMLName="ID"/>
     <Code><![CDATA[
        log ("getKeyHandle (ProvisioningHandle=" + provisioning_handle + ", ID=" + id + ")");
        return sks.getKeyHandle (provisioning_handle, id);
]]></Code></Method>

   <Method Name="setCertificatePath" Throws="SKSException">
     <Parameter Name="key_handle"       Type="int"    XMLName="KeyHandle"/>
     <Parameter Name="certificate_path" Type="binary" XMLName="X509Certificate" RewriteRule="In.X509" List="true"/>
     <Parameter Name="mac"              Type="binary" XMLName="MAC"/>
     <Code><![CDATA[
        log ("setCertificatePath (KeyHandle=" + key_handle + ")");
        X509Certificate[] cp = null;
        try
          {
            cp = CertificateUtil.getSortedPathFromBlobs (certificate_path);
          }
        catch (IOException e)
          {
            throw new SKSException (e);
          }
        sks.setCertificatePath (key_handle, cp, mac);
]]></Code></Method>

   <Method Name="setSymmetricKey" Throws="SKSException">
     <Parameter Name="key_handle"    Type="int"    XMLName="KeyHandle"/>
     <Parameter Name="symmetric_key" Type="binary" XMLName="SymmetricKey"/>
     <Parameter Name="mac"           Type="binary" XMLName="MAC"/>
     <Code><![CDATA[
        log ("setSymmetricKey (KeyHandle=" + key_handle + ")");
        sks.setSymmetricKey (key_handle, symmetric_key, mac);
]]></Code></Method>

   <Method Name="addExtension" Throws="SKSException">
     <Parameter Name="key_handle"     Type="int"    XMLName="KeyHandle"/>
     <Parameter Name="type"           Type="string" XMLName="Type"/>
     <Parameter Name="sub_type"       Type="byte"   XMLName="SubType"/>
     <Parameter Name="qualifier"      Type="binary" XMLName="Qualifier"/>
     <Parameter Name="extension_data" Type="binary" XMLName="ExtensionData"/>
     <Parameter Name="mac"            Type="binary" XMLName="MAC"/>
     <Code><![CDATA[
        log ("addExtension (KeyHandle=" + key_handle + ")");
        sks.addExtension (key_handle,
                          type,
                          sub_type,
                          qualifier,
                          extension_data,
                          mac);
]]></Code></Method>

   <Method Name="restorePrivateKey" Throws="SKSException">
     <Parameter Name="key_handle"  Type="int"    XMLName="KeyHandle"/>
     <Parameter Name="private_key" Type="binary" XMLName="PrivateKey"/>
     <Parameter Name="mac"         Type="binary" XMLName="MAC"/>
     <Code><![CDATA[
        log ("restorePrivateKey (KeyHandle=" + key_handle + ")");
        sks.restorePrivateKey (key_handle, private_key, mac);
]]></Code></Method>

   <Method Name="pp_deleteKey" Throws="SKSException">
     <Parameter Name="provisioning_handle" Type="int"    XMLName="ProvisioningHandle"/>
     <Parameter Name="target_key_handle"   Type="int"    XMLName="TargetKeyHandle"/>
     <Parameter Name="authorization"       Type="binary" XMLName="Authorization"/>
     <Parameter Name="mac"                 Type="binary" XMLName="MAC"/>
     <Code><![CDATA[
        log ("pp_deleteKey (ProvisioningHandle=" + provisioning_handle + ", TargetKeyHandle=" + target_key_handle + ")");
        sks.pp_deleteKey (provisioning_handle, target_key_handle, authorization, mac);
]]></Code></Method>

   <Method Name="pp_unlockKey" Throws="SKSException">
     <Parameter Name="provisioning_handle" Type="int"    XMLName="ProvisioningHandle"/>
     <Parameter Name="target_key_handle"   Type="int"    XMLName="TargetKeyHandle"/>
     <Parameter Name="authorization"       Type="binary" XMLName="Authorization"/>
     <Parameter Name="mac"                 Type="binary" XMLName="MAC"/>
     <Code><![CDATA[
        log ("pp_unlockKey (ProvisioningHandle=" + provisioning_handle + ", TargetKeyHandle=" + target_key_handle + ")");
        sks.pp_unlockKey (provisioning_handle, target_key_handle, authorization, mac);
]]></Code></Method>

   <Method Name="pp_updateKey" Throws="SKSException">
     <Parameter Name="key_handle"            Type="int"    XMLName="KeyHandle"/>
     <Parameter Name="target_key_handle"     Type="int"    XMLName="TargetKeyHandle"/>
     <Parameter Name="authorization"         Type="binary" XMLName="Authorization"/>
     <Parameter Name="mac"                   Type="binary" XMLName="MAC"/>
     <Code><![CDATA[
        log ("pp_updateKey (KeyHandle=" + key_handle + ", TargetKeyHandle=" + target_key_handle + ")");
        sks.pp_updateKey (key_handle, target_key_handle, authorization, mac);
]]></Code></Method>

   <Method Name="pp_cloneKeyProtection" Throws="SKSException">
     <Parameter Name="key_handle"            Type="int"    XMLName="KeyHandle"/>
     <Parameter Name="target_key_handle"     Type="int"    XMLName="TargetKeyHandle"/>
     <Parameter Name="authorization"         Type="binary" XMLName="Authorization"/>
     <Parameter Name="mac"                   Type="binary" XMLName="MAC"/>
     <Code><![CDATA[
        log ("pp_cloneKeyProtection (KeyHandle=" + key_handle + ", TargetKeyHandle=" + target_key_handle + ")");
        sks.pp_cloneKeyProtection (key_handle, target_key_handle, authorization, mac);
]]></Code></Method>

   <Method Name="enumerateKeys" ReturnClass="EnumeratedKey" Throws="SKSException">
     <Returns   Name="key_handle"          Type="int" XMLName="KeyHandle"/>
     <Parameter Name="key_handle"          Type="int" XMLName="KeyHandle"/>
     <Parameter Name="provisioning_handle" Type="int" XMLName="ProvisioningHandle" Mode="out" Null="true"/>
     <Code><![CDATA[
        EnumeratedKey ek = sks.enumerateKeys (key_handle);
        if (ek == null)
          {
            ek = new EnumeratedKey ();  // Back to square #1
          }
        else
          {
            provisioning_handle.value = ek.getProvisioningHandle ();
          }
        log ("enumerateKeys (KeyHandle=" + key_handle + ") : KeyHandle=" + ek.getKeyHandle ());
        return ek.getKeyHandle ();
]]></Code></Method>

   <Method Name="getKeyAttributes" ReturnClass="KeyAttributes" Throws="SKSException">
     <Parameter Name="key_handle"          Type="int"    XMLName="KeyHandle"/>
     <Parameter Name="is_symmetric_key"    Type="bool"   XMLName="IsSymmetricKey"    Mode="out"/>
     <Parameter Name="app_usage"           Type="byte"   XMLName="AppUsage"          Mode="out"/>
     <Parameter Name="friendly_name"       Type="string" XMLName="FriendlyName"      Mode="out" Null="true"/>
     <Parameter Name="certificate_path"    Type="binary" XMLName="X509Certificate"   Mode="out" List="true" RewriteRule="Out.X509"/>
     <Parameter Name="endorsed_algorithms" Type="string" XMLName="EndorsedAlgorithm" Mode="out" List="true" Null="true" RewriteRule="Out.StringArray"/>
     <Parameter Name="extension_types"     Type="string" XMLName="ExtensionType"     Mode="out" List="true" Null="true" RewriteRule="Out.StringArray"/>
     <Code><![CDATA[
        log ("getKeyAttributes (KeyHandle=" + key_handle + ")");
        try
          {
            KeyAttributes ka = sks.getKeyAttributes (key_handle);
            is_symmetric_key.value = ka.isSymmetricKey ();
            app_usage.value = ka.getAppUsage ().getSKSValue ();
            friendly_name.value = ka.getFriendlyName ();
            certificate_path.value = new ArrayList<byte[]> ();
            for (X509Certificate cert : ka.getCertificatePath ())
              {
                certificate_path.value.add (cert.getEncoded ());
              }
            endorsed_algorithms.value = new ArrayList<String> ();
            for (String alg :   ka.getEndorsedAlgorithms ())
              {
                endorsed_algorithms.value.add (alg);
              }
            extension_types.value = new ArrayList<String> ();
            for (String type :  ka.getExtensionTypes ())
              {
                extension_types.value.add (type);
              }
          }
        catch (GeneralSecurityException e)
          {
            throw new SKSException (e);
          }
 ]]></Code></Method>

   <Method Name="getKeyProtectionInfo" ReturnClass="KeyProtectionInfo" Throws="SKSException">
     <Parameter Name="key_handle"           Type="int"   XMLName="KeyHandle"/>
     <Parameter Name="protection_status"    Type="byte"  XMLName="ProtectionStatus"    Mode="out"/>
     <Parameter Name="puk_format"           Type="byte"  XMLName="PUKFormat"           Mode="out" Null="true" RewriteRule="Out.PassphraseFormat"/>
     <Parameter Name="puk_retry_limit"      Type="short" XMLName="PUKRetryLimit"       Mode="out" Null="true"/>
     <Parameter Name="puk_error_count"      Type="short" XMLName="PUKErrorCount"       Mode="out" Null="true"/>
     <Parameter Name="user_defined"         Type="bool"  XMLName="UserDefined"         Mode="out" Null="true"/>
     <Parameter Name="user_modifiable"      Type="bool"  XMLName="UserModifiable"      Mode="out" Null="true"/>
     <Parameter Name="format"               Type="byte"  XMLName="Format"              Mode="out" Null="true" RewriteRule="Out.PassphraseFormat"/>
     <Parameter Name="retry_limit"          Type="short" XMLName="RetryLimit"          Mode="out" Null="true"/>
     <Parameter Name="grouping"             Type="byte"  XMLName="Grouping"            Mode="out" Null="true" RewriteRule="Out.Grouping"/>
     <Parameter Name="pattern_restrictions" Type="byte"  XMLName="PatternRestrictions" Mode="out" Null="true" RewriteRule="Out.PatternRestrictions"/>
     <Parameter Name="min_length"           Type="short" XMLName="MinLength"           Mode="out" Null="true"/>
     <Parameter Name="max_length"           Type="short" XMLName="MaxLength"           Mode="out" Null="true"/>
     <Parameter Name="input_method"         Type="byte"  XMLName="InputMethod"         Mode="out" Null="true" RewriteRule="Out.InputMethod"/>
     <Parameter Name="pin_error_count"      Type="short" XMLName="PINErrorCount"       Mode="out" Null="true"/>
     <Parameter Name="enable_pin_caching"   Type="bool"  XMLName="EnablePINCaching"    Mode="out" Null="true"/>
     <Parameter Name="biometric_protection" Type="byte"  XMLName="BiometricProtection" Mode="out"/>
     <Parameter Name="export_protection"    Type="byte"  XMLName="ExportProtection"    Mode="out"/>
     <Parameter Name="delete_protection"    Type="byte"  XMLName="DeleteProtection"    Mode="out"/>
     <Parameter Name="key_backup"           Type="byte"  XMLName="KeyBackup"           Mode="out"/>
     <Code><![CDATA[
        log ("getKeyProtectionInfo (KeyHandle=" + key_handle + ")");
        KeyProtectionInfo kpi      = sks.getKeyProtectionInfo (key_handle);
        protection_status.value    = kpi.getSKSProtectionStatus ();
        if (kpi.hasLocalPUKProtection ())
          {
            puk_format.value           = kpi.getPUKFormat ().getSKSValue ();
            puk_retry_limit.value      = kpi.getPUKRetryLimit ();
            puk_error_count.value      = kpi.getPUKErrorCount ();
          }
        if (kpi.hasLocalPINProtection ())
          {
            user_defined.value         = kpi.getPINUserDefinedFlag ();
            user_modifiable.value      = kpi.getPINUserModifiableFlag ();
            format.value               = kpi.getPINFormat ().getSKSValue ();
            retry_limit.value          = kpi.getPINRetryLimit ();
            grouping.value             = kpi.getPINGrouping ().getSKSValue ();
            pattern_restrictions.value = PatternRestriction.getSKSValue (kpi.getPINPatternRestrictions ());
            min_length.value           = kpi.getPINMinLength ();
            max_length.value           = kpi.getPINMaxLength ();
            input_method.value         = kpi.getPINInputMethod ().getSKSValue ();
            pin_error_count.value      = kpi.getPINErrorCount ();
          }
        enable_pin_caching.value   = kpi.getEnablePINCachingFlag ();
        biometric_protection.value = kpi.getBiometricProtection ().getSKSValue ();
        export_protection.value    = kpi.getExportProtection ().getSKSValue ();
        delete_protection.value    = kpi.getDeleteProtection ().getSKSValue ();
        key_backup.value           = kpi.getKeyBackup ();
]]></Code></Method>

   <Method Name="getExtension" ReturnClass="Extension" Throws="SKSException">
     <Parameter Name="key_handle"     Type="int"    XMLName="KeyHandle"/>
     <Parameter Name="type"           Type="string" XMLName="Type"/>
     <Parameter Name="sub_type"       Type="byte"   XMLName="SubType"       Mode="out"/>
     <Parameter Name="qualifier"      Type="binary" XMLName="Qualifier"     Mode="out"/>
     <Parameter Name="extension_data" Type="binary" XMLName="ExtensionData" Mode="out"/>
     <Code><![CDATA[
        log ("getExtension (KeyHandle=" + key_handle + ", Type=" + type + ")");
        Extension ext = sks.getExtension (key_handle, type);
        sub_type.value       = ext.getSubType ();
        qualifier.value      = ext.getQualifier ();
        extension_data.value = ext.getExtensionData ();
]]></Code></Method>

   <Method Name="setProperty" Throws="SKSException">
     <Parameter Name="key_handle" Type="int"    XMLName="KeyHandle"/>
     <Parameter Name="type"       Type="string" XMLName="Type"/>
     <Parameter Name="name"       Type="binary" XMLName="Name" />
     <Parameter Name="value"      Type="binary" XMLName="Value"/>
     <Code><![CDATA[
        log ("setProperty (KeyHandle=" + key_handle + ", Type=" + type + ")");
        sks.setProperty (key_handle, type, name, value);
]]></Code></Method>

   <Method Name="deleteKey" Throws="SKSException">
     <Parameter Name="key_handle"    Type="int"    XMLName="KeyHandle"/>
     <Parameter Name="authorization" Type="binary" XMLName="Authorization" Null="true"/>
     <Code><![CDATA[
        log ("deleteKey (KeyHandle=" + key_handle + ")");
        sks.deleteKey (key_handle, authorization);
]]></Code></Method>

   <Method Name="exportKey" Throws="SKSException">
     <Returns   Name="key"           Type="binary" XMLName="Key"/>
     <Parameter Name="key_handle"    Type="int"    XMLName="KeyHandle"/>
     <Parameter Name="authorization" Type="binary" XMLName="Authorization" Null="true"/>
     <Code><![CDATA[
        log ("exportKey (KeyHandle=" + key_handle + ")");
        return sks.exportKey (key_handle, authorization);
]]></Code></Method>

   <Method Name="unlockKey" Throws="SKSException">
     <Parameter Name="key_handle"    Type="int"    XMLName="KeyHandle"/>
     <Parameter Name="authorization" Type="binary" XMLName="Authorization"/>
     <Code><![CDATA[
        log ("unlockKey (KeyHandle=" + key_handle + ")");
        sks.unlockKey (key_handle, authorization);
]]></Code></Method>

   <Method Name="changePIN" Throws="SKSException">
     <Parameter Name="key_handle"    Type="int"    XMLName="KeyHandle"/>
     <Parameter Name="authorization" Type="binary" XMLName="Authorization"/>
     <Parameter Name="new_pin"       Type="binary" XMLName="NewPIN"/>
     <Code><![CDATA[
        log ("changePIN (KeyHandle=" + key_handle + ")");
        sks.changePIN (key_handle, authorization, new_pin);
]]></Code></Method>

   <Method Name="setPIN" Throws="SKSException">
     <Parameter Name="key_handle"    Type="int"    XMLName="KeyHandle"/>
     <Parameter Name="authorization" Type="binary" XMLName="Authorization"/>
     <Parameter Name="new_pin"       Type="binary" XMLName="NewPIN"/>
     <Code><![CDATA[
        log ("setPIN (KeyHandle=" + key_handle + ")");
        sks.setPIN (key_handle, authorization, new_pin);
]]></Code></Method>

   <Method Name="signHashedData" Throws="SKSException" EmbedRule="TGA">
     <Returns   Name="result"                    Type="binary" XMLName="Result"/>
     <Parameter Name="key_handle"                Type="int"    XMLName="KeyHandle"/>
     <Parameter Name="algorithm"                 Type="string" XMLName="Algorithm"/>
     <Parameter Name="parameters"                Type="binary" XMLName="Parameters"    Null="true"/>
     <Parameter Name="trusted_gui_authorization" Type="bool"   XMLName="TrustedGUIAuthorization" SuppressRule="TGA"/>
     <Parameter Name="authorization"             Type="binary" XMLName="Authorization" Null="true"/>
     <Parameter Name="data"                      Type="binary" XMLName="Data"/>
     <Code><![CDATA[
        authorization = checkAuthorization (trusted_gui_authorization,
                                            key_handle,
                                            authorization);
        log ("signHashedData (KeyHandle=" + key_handle + ")");
        return sks.signHashedData (key_handle,
                                   algorithm,
                                   parameters,
                                   authorization,
                                   data);
]]></Code></Method>

   <Method Name="asymmetricKeyDecrypt" Throws="SKSException" EmbedRule="TGA">
     <Returns   Name="result"                    Type="binary" XMLName="Result"/>
     <Parameter Name="key_handle"                Type="int"    XMLName="KeyHandle"/>
     <Parameter Name="algorithm"                 Type="string" XMLName="Algorithm"/>
     <Parameter Name="parameters"                Type="binary" XMLName="Parameters"    Null="true"/>
     <Parameter Name="trusted_gui_authorization" Type="bool"   XMLName="TrustedGUIAuthorization" SuppressRule="TGA"/>
     <Parameter Name="authorization"             Type="binary" XMLName="Authorization" Null="true"/>
     <Parameter Name="data"                      Type="binary" XMLName="Data"/>
     <Code><![CDATA[
        log ("asymmetricKeyDecrypt (KeyHandle=" + key_handle + ")");
        return sks.asymmetricKeyDecrypt (key_handle, 
                                         algorithm,
                                         parameters,
                                         authorization, 
                                         data);
]]></Code></Method>

   <Method Name="keyAgreement" Throws="SKSException" EmbedRule="TGA">
     <Returns   Name="key"                       Type="binary" XMLName="Key"/>
     <Parameter Name="key_handle"                Type="int"    XMLName="KeyHandle"/>
     <Parameter Name="algorithm"                 Type="string" XMLName="Algorithm"/>
     <Parameter Name="parameters"                Type="binary" XMLName="Parameters"    Null="true"/>
     <Parameter Name="trusted_gui_authorization" Type="bool"   XMLName="TrustedGUIAuthorization" SuppressRule="TGA"/>
     <Parameter Name="authorization"             Type="binary" XMLName="Authorization" Null="true"/>
     <Parameter Name="public_key"                Type="binary" XMLName="PublicKey"/>
     <Code><![CDATA[
        log ("keyAgreement (KeyHandle=" + key_handle + ")");
        return sks.keyAgreement (key_handle, 
                                 algorithm, 
                                 parameters, 
                                 authorization, 
                                 createPublicKeyFromBlob (public_key));
]]></Code></Method>

   <Method Name="performHMAC" Throws="SKSException" EmbedRule="TGA">
     <Returns   Name="result"                    Type="binary" XMLName="Result"/>
     <Parameter Name="key_handle"                Type="int"    XMLName="KeyHandle"/>
     <Parameter Name="algorithm"                 Type="string" XMLName="Algorithm"/>
     <Parameter Name="trusted_gui_authorization" Type="bool"   XMLName="TrustedGUIAuthorization" SuppressRule="TGA"/>
     <Parameter Name="authorization"             Type="binary" XMLName="Authorization" Null="true"/>
     <Parameter Name="data"                      Type="binary" XMLName="Data"/>
     <Code><![CDATA[
        log ("performHMAC (KeyHandle=" + key_handle + ")");
        return sks.performHMAC (key_handle, 
                                algorithm,
                                authorization,
                                data);
]]></Code></Method>

   <Method Name="symmetricKeyEncrypt" Throws="SKSException" EmbedRule="TGA">
     <Returns   Name="result"                    Type="binary" XMLName="Result"/>
     <Parameter Name="key_handle"                Type="int"    XMLName="KeyHandle"/>
     <Parameter Name="algorithm"                 Type="string" XMLName="Algorithm"/>
     <Parameter Name="mode"                      Type="bool"   XMLName="Mode"/>
     <Parameter Name="iv"                        Type="binary" XMLName="IV"            Null="true"/>
     <Parameter Name="trusted_gui_authorization" Type="bool"   XMLName="TrustedGUIAuthorization" SuppressRule="TGA"/>
     <Parameter Name="authorization"             Type="binary" XMLName="Authorization" Null="true"/>
     <Parameter Name="data"                      Type="binary" XMLName="Data"/>
     <Code><![CDATA[
        log ("symmetricKeyEncrypt (KeyHandle=" + key_handle + ")");
        return sks.symmetricKeyEncrypt (key_handle, algorithm, mode, iv, authorization, data);
]]></Code></Method>

   <Method Name="getVersion" Public="false">
     <Returns Name="version" Type="string"/>
     <Code><![CDATA[
        return "0.00001";
]]></Code></Method>

   <Method Name="logEvent" Public="false">
     <Parameter Name="description" Type="string"/>
     <Code><![CDATA[
        log ("LOG: " + description);
]]></Code></Method>

</WebService>
